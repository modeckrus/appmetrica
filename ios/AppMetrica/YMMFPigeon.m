// Autogenerated from Pigeon (v1.0.9), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "YMMFPigeon.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ? error.code : [NSNull null]),
        @"message": (error.message ? error.message : [NSNull null]),
        @"details": (error.details ? error.details : [NSNull null]),
        };
  }
  return @{
      @"result": (result ? result : [NSNull null]),
      @"error": errorDict,
      };
}

@interface YMMFAppMetricaConfigPigeon ()
+ (YMMFAppMetricaConfigPigeon *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface YMMFStringPigeonWrapper ()
+ (YMMFStringPigeonWrapper *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface YMMFLocationPigeon ()
+ (YMMFLocationPigeon *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface YMMFPreloadInfoPigeon ()
+ (YMMFPreloadInfoPigeon *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface YMMFAppMetricaDeferredDeeplinkErrorPigeon ()
+ (YMMFAppMetricaDeferredDeeplinkErrorPigeon *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface YMMFAppMetricaDeferredDeeplinkPigeon ()
+ (YMMFAppMetricaDeferredDeeplinkPigeon *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface YMMFAppMetricaDeferredDeeplinkParametersPigeon ()
+ (YMMFAppMetricaDeferredDeeplinkParametersPigeon *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface YMMFAppMetricaDeviceIdPigeon ()
+ (YMMFAppMetricaDeviceIdPigeon *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface YMMFRevenuePigeon ()
+ (YMMFRevenuePigeon *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface YMMFReceiptPigeon ()
+ (YMMFReceiptPigeon *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface YMMFECommerceAmountPigeon ()
+ (YMMFECommerceAmountPigeon *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface YMMFECommerceProductPigeon ()
+ (YMMFECommerceProductPigeon *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface YMMFECommercePricePigeon ()
+ (YMMFECommercePricePigeon *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface YMMFECommerceReferrerPigeon ()
+ (YMMFECommerceReferrerPigeon *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface YMMFECommerceScreenPigeon ()
+ (YMMFECommerceScreenPigeon *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface YMMFECommerceCartItemPigeon ()
+ (YMMFECommerceCartItemPigeon *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface YMMFECommerceOrderPigeon ()
+ (YMMFECommerceOrderPigeon *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface YMMFECommerceEventPigeon ()
+ (YMMFECommerceEventPigeon *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface YMMFStackTraceElementPigeon ()
+ (YMMFStackTraceElementPigeon *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface YMMFErrorDetailsPigeon ()
+ (YMMFErrorDetailsPigeon *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface YMMFUserProfileAttributePigeon ()
+ (YMMFUserProfileAttributePigeon *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface YMMFUserProfilePigeon ()
+ (YMMFUserProfilePigeon *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface YMMFReporterConfigPigeon ()
+ (YMMFReporterConfigPigeon *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation YMMFAppMetricaConfigPigeon
+ (YMMFAppMetricaConfigPigeon *)fromMap:(NSDictionary *)dict {
  YMMFAppMetricaConfigPigeon *result = [[YMMFAppMetricaConfigPigeon alloc] init];
  result.apiKey = dict[@"apiKey"];
  if ((NSNull *)result.apiKey == [NSNull null]) {
    result.apiKey = nil;
  }
  result.appVersion = dict[@"appVersion"];
  if ((NSNull *)result.appVersion == [NSNull null]) {
    result.appVersion = nil;
  }
  result.crashReporting = dict[@"crashReporting"];
  if ((NSNull *)result.crashReporting == [NSNull null]) {
    result.crashReporting = nil;
  }
  result.firstActivationAsUpdate = dict[@"firstActivationAsUpdate"];
  if ((NSNull *)result.firstActivationAsUpdate == [NSNull null]) {
    result.firstActivationAsUpdate = nil;
  }
  result.location = [YMMFLocationPigeon fromMap:dict[@"location"]];
  if ((NSNull *)result.location == [NSNull null]) {
    result.location = nil;
  }
  result.locationTracking = dict[@"locationTracking"];
  if ((NSNull *)result.locationTracking == [NSNull null]) {
    result.locationTracking = nil;
  }
  result.logs = dict[@"logs"];
  if ((NSNull *)result.logs == [NSNull null]) {
    result.logs = nil;
  }
  result.sessionTimeout = dict[@"sessionTimeout"];
  if ((NSNull *)result.sessionTimeout == [NSNull null]) {
    result.sessionTimeout = nil;
  }
  result.statisticsSending = dict[@"statisticsSending"];
  if ((NSNull *)result.statisticsSending == [NSNull null]) {
    result.statisticsSending = nil;
  }
  result.preloadInfo = [YMMFPreloadInfoPigeon fromMap:dict[@"preloadInfo"]];
  if ((NSNull *)result.preloadInfo == [NSNull null]) {
    result.preloadInfo = nil;
  }
  result.maxReportsInDatabaseCount = dict[@"maxReportsInDatabaseCount"];
  if ((NSNull *)result.maxReportsInDatabaseCount == [NSNull null]) {
    result.maxReportsInDatabaseCount = nil;
  }
  result.nativeCrashReporting = dict[@"nativeCrashReporting"];
  if ((NSNull *)result.nativeCrashReporting == [NSNull null]) {
    result.nativeCrashReporting = nil;
  }
  result.sessionsAutoTracking = dict[@"sessionsAutoTracking"];
  if ((NSNull *)result.sessionsAutoTracking == [NSNull null]) {
    result.sessionsAutoTracking = nil;
  }
  result.errorEnvironment = dict[@"errorEnvironment"];
  if ((NSNull *)result.errorEnvironment == [NSNull null]) {
    result.errorEnvironment = nil;
  }
  result.userProfileID = dict[@"userProfileID"];
  if ((NSNull *)result.userProfileID == [NSNull null]) {
    result.userProfileID = nil;
  }
  result.revenueAutoTracking = dict[@"revenueAutoTracking"];
  if ((NSNull *)result.revenueAutoTracking == [NSNull null]) {
    result.revenueAutoTracking = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.apiKey ? self.apiKey : [NSNull null]), @"apiKey", (self.appVersion ? self.appVersion : [NSNull null]), @"appVersion", (self.crashReporting ? self.crashReporting : [NSNull null]), @"crashReporting", (self.firstActivationAsUpdate ? self.firstActivationAsUpdate : [NSNull null]), @"firstActivationAsUpdate", (self.location ? [self.location toMap] : [NSNull null]), @"location", (self.locationTracking ? self.locationTracking : [NSNull null]), @"locationTracking", (self.logs ? self.logs : [NSNull null]), @"logs", (self.sessionTimeout ? self.sessionTimeout : [NSNull null]), @"sessionTimeout", (self.statisticsSending ? self.statisticsSending : [NSNull null]), @"statisticsSending", (self.preloadInfo ? [self.preloadInfo toMap] : [NSNull null]), @"preloadInfo", (self.maxReportsInDatabaseCount ? self.maxReportsInDatabaseCount : [NSNull null]), @"maxReportsInDatabaseCount", (self.nativeCrashReporting ? self.nativeCrashReporting : [NSNull null]), @"nativeCrashReporting", (self.sessionsAutoTracking ? self.sessionsAutoTracking : [NSNull null]), @"sessionsAutoTracking", (self.errorEnvironment ? self.errorEnvironment : [NSNull null]), @"errorEnvironment", (self.userProfileID ? self.userProfileID : [NSNull null]), @"userProfileID", (self.revenueAutoTracking ? self.revenueAutoTracking : [NSNull null]), @"revenueAutoTracking", nil];
}
@end

@implementation YMMFStringPigeonWrapper
+ (YMMFStringPigeonWrapper *)fromMap:(NSDictionary *)dict {
  YMMFStringPigeonWrapper *result = [[YMMFStringPigeonWrapper alloc] init];
  result.stringPigeon = dict[@"stringPigeon"];
  if ((NSNull *)result.stringPigeon == [NSNull null]) {
    result.stringPigeon = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.stringPigeon ? self.stringPigeon : [NSNull null]), @"stringPigeon", nil];
}
@end

@implementation YMMFLocationPigeon
+ (YMMFLocationPigeon *)fromMap:(NSDictionary *)dict {
  YMMFLocationPigeon *result = [[YMMFLocationPigeon alloc] init];
  result.isNull = dict[@"isNull"];
  if ((NSNull *)result.isNull == [NSNull null]) {
    result.isNull = nil;
  }
  result.latitude = dict[@"latitude"];
  if ((NSNull *)result.latitude == [NSNull null]) {
    result.latitude = nil;
  }
  result.longitude = dict[@"longitude"];
  if ((NSNull *)result.longitude == [NSNull null]) {
    result.longitude = nil;
  }
  result.provider = dict[@"provider"];
  if ((NSNull *)result.provider == [NSNull null]) {
    result.provider = nil;
  }
  result.altitude = dict[@"altitude"];
  if ((NSNull *)result.altitude == [NSNull null]) {
    result.altitude = nil;
  }
  result.accuracy = dict[@"accuracy"];
  if ((NSNull *)result.accuracy == [NSNull null]) {
    result.accuracy = nil;
  }
  result.course = dict[@"course"];
  if ((NSNull *)result.course == [NSNull null]) {
    result.course = nil;
  }
  result.speed = dict[@"speed"];
  if ((NSNull *)result.speed == [NSNull null]) {
    result.speed = nil;
  }
  result.timestamp = dict[@"timestamp"];
  if ((NSNull *)result.timestamp == [NSNull null]) {
    result.timestamp = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.isNull ? self.isNull : [NSNull null]), @"isNull", (self.latitude ? self.latitude : [NSNull null]), @"latitude", (self.longitude ? self.longitude : [NSNull null]), @"longitude", (self.provider ? self.provider : [NSNull null]), @"provider", (self.altitude ? self.altitude : [NSNull null]), @"altitude", (self.accuracy ? self.accuracy : [NSNull null]), @"accuracy", (self.course ? self.course : [NSNull null]), @"course", (self.speed ? self.speed : [NSNull null]), @"speed", (self.timestamp ? self.timestamp : [NSNull null]), @"timestamp", nil];
}
@end

@implementation YMMFPreloadInfoPigeon
+ (YMMFPreloadInfoPigeon *)fromMap:(NSDictionary *)dict {
  YMMFPreloadInfoPigeon *result = [[YMMFPreloadInfoPigeon alloc] init];
  result.isNull = dict[@"isNull"];
  if ((NSNull *)result.isNull == [NSNull null]) {
    result.isNull = nil;
  }
  result.trackingId = dict[@"trackingId"];
  if ((NSNull *)result.trackingId == [NSNull null]) {
    result.trackingId = nil;
  }
  result.additionalInfo = dict[@"additionalInfo"];
  if ((NSNull *)result.additionalInfo == [NSNull null]) {
    result.additionalInfo = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.isNull ? self.isNull : [NSNull null]), @"isNull", (self.trackingId ? self.trackingId : [NSNull null]), @"trackingId", (self.additionalInfo ? self.additionalInfo : [NSNull null]), @"additionalInfo", nil];
}
@end

@implementation YMMFAppMetricaDeferredDeeplinkErrorPigeon
+ (YMMFAppMetricaDeferredDeeplinkErrorPigeon *)fromMap:(NSDictionary *)dict {
  YMMFAppMetricaDeferredDeeplinkErrorPigeon *result = [[YMMFAppMetricaDeferredDeeplinkErrorPigeon alloc] init];
  result.reason = [dict[@"reason"] integerValue];
  result.description = dict[@"description"];
  if ((NSNull *)result.description == [NSNull null]) {
    result.description = nil;
  }
  result.message = dict[@"message"];
  if ((NSNull *)result.message == [NSNull null]) {
    result.message = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:@(self.reason), @"reason", (self.description ? self.description : [NSNull null]), @"description", (self.message ? self.message : [NSNull null]), @"message", nil];
}
@end

@implementation YMMFAppMetricaDeferredDeeplinkPigeon
+ (YMMFAppMetricaDeferredDeeplinkPigeon *)fromMap:(NSDictionary *)dict {
  YMMFAppMetricaDeferredDeeplinkPigeon *result = [[YMMFAppMetricaDeferredDeeplinkPigeon alloc] init];
  result.deeplink = dict[@"deeplink"];
  if ((NSNull *)result.deeplink == [NSNull null]) {
    result.deeplink = nil;
  }
  result.error = [YMMFAppMetricaDeferredDeeplinkErrorPigeon fromMap:dict[@"error"]];
  if ((NSNull *)result.error == [NSNull null]) {
    result.error = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.deeplink ? self.deeplink : [NSNull null]), @"deeplink", (self.error ? [self.error toMap] : [NSNull null]), @"error", nil];
}
@end

@implementation YMMFAppMetricaDeferredDeeplinkParametersPigeon
+ (YMMFAppMetricaDeferredDeeplinkParametersPigeon *)fromMap:(NSDictionary *)dict {
  YMMFAppMetricaDeferredDeeplinkParametersPigeon *result = [[YMMFAppMetricaDeferredDeeplinkParametersPigeon alloc] init];
  result.parameters = dict[@"parameters"];
  if ((NSNull *)result.parameters == [NSNull null]) {
    result.parameters = nil;
  }
  result.error = [YMMFAppMetricaDeferredDeeplinkErrorPigeon fromMap:dict[@"error"]];
  if ((NSNull *)result.error == [NSNull null]) {
    result.error = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.parameters ? self.parameters : [NSNull null]), @"parameters", (self.error ? [self.error toMap] : [NSNull null]), @"error", nil];
}
@end

@implementation YMMFAppMetricaDeviceIdPigeon
+ (YMMFAppMetricaDeviceIdPigeon *)fromMap:(NSDictionary *)dict {
  YMMFAppMetricaDeviceIdPigeon *result = [[YMMFAppMetricaDeviceIdPigeon alloc] init];
  result.deviceId = dict[@"deviceId"];
  if ((NSNull *)result.deviceId == [NSNull null]) {
    result.deviceId = nil;
  }
  result.errorReason = [dict[@"errorReason"] integerValue];
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.deviceId ? self.deviceId : [NSNull null]), @"deviceId", @(self.errorReason), @"errorReason", nil];
}
@end

@implementation YMMFRevenuePigeon
+ (YMMFRevenuePigeon *)fromMap:(NSDictionary *)dict {
  YMMFRevenuePigeon *result = [[YMMFRevenuePigeon alloc] init];
  result.price = dict[@"price"];
  if ((NSNull *)result.price == [NSNull null]) {
    result.price = nil;
  }
  result.currency = dict[@"currency"];
  if ((NSNull *)result.currency == [NSNull null]) {
    result.currency = nil;
  }
  result.quantity = dict[@"quantity"];
  if ((NSNull *)result.quantity == [NSNull null]) {
    result.quantity = nil;
  }
  result.productId = dict[@"productId"];
  if ((NSNull *)result.productId == [NSNull null]) {
    result.productId = nil;
  }
  result.payload = dict[@"payload"];
  if ((NSNull *)result.payload == [NSNull null]) {
    result.payload = nil;
  }
  result.receipt = [YMMFReceiptPigeon fromMap:dict[@"receipt"]];
  if ((NSNull *)result.receipt == [NSNull null]) {
    result.receipt = nil;
  }
  result.transactionId = dict[@"transactionId"];
  if ((NSNull *)result.transactionId == [NSNull null]) {
    result.transactionId = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.price ? self.price : [NSNull null]), @"price", (self.currency ? self.currency : [NSNull null]), @"currency", (self.quantity ? self.quantity : [NSNull null]), @"quantity", (self.productId ? self.productId : [NSNull null]), @"productId", (self.payload ? self.payload : [NSNull null]), @"payload", (self.receipt ? [self.receipt toMap] : [NSNull null]), @"receipt", (self.transactionId ? self.transactionId : [NSNull null]), @"transactionId", nil];
}
@end

@implementation YMMFReceiptPigeon
+ (YMMFReceiptPigeon *)fromMap:(NSDictionary *)dict {
  YMMFReceiptPigeon *result = [[YMMFReceiptPigeon alloc] init];
  result.isNull = dict[@"isNull"];
  if ((NSNull *)result.isNull == [NSNull null]) {
    result.isNull = nil;
  }
  result.data = dict[@"data"];
  if ((NSNull *)result.data == [NSNull null]) {
    result.data = nil;
  }
  result.signature = dict[@"signature"];
  if ((NSNull *)result.signature == [NSNull null]) {
    result.signature = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.isNull ? self.isNull : [NSNull null]), @"isNull", (self.data ? self.data : [NSNull null]), @"data", (self.signature ? self.signature : [NSNull null]), @"signature", nil];
}
@end

@implementation YMMFECommerceAmountPigeon
+ (YMMFECommerceAmountPigeon *)fromMap:(NSDictionary *)dict {
  YMMFECommerceAmountPigeon *result = [[YMMFECommerceAmountPigeon alloc] init];
  result.isNull = dict[@"isNull"];
  if ((NSNull *)result.isNull == [NSNull null]) {
    result.isNull = nil;
  }
  result.amount = dict[@"amount"];
  if ((NSNull *)result.amount == [NSNull null]) {
    result.amount = nil;
  }
  result.currency = dict[@"currency"];
  if ((NSNull *)result.currency == [NSNull null]) {
    result.currency = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.isNull ? self.isNull : [NSNull null]), @"isNull", (self.amount ? self.amount : [NSNull null]), @"amount", (self.currency ? self.currency : [NSNull null]), @"currency", nil];
}
@end

@implementation YMMFECommerceProductPigeon
+ (YMMFECommerceProductPigeon *)fromMap:(NSDictionary *)dict {
  YMMFECommerceProductPigeon *result = [[YMMFECommerceProductPigeon alloc] init];
  result.isNull = dict[@"isNull"];
  if ((NSNull *)result.isNull == [NSNull null]) {
    result.isNull = nil;
  }
  result.sku = dict[@"sku"];
  if ((NSNull *)result.sku == [NSNull null]) {
    result.sku = nil;
  }
  result.name = dict[@"name"];
  if ((NSNull *)result.name == [NSNull null]) {
    result.name = nil;
  }
  result.categoriesPath = dict[@"categoriesPath"];
  if ((NSNull *)result.categoriesPath == [NSNull null]) {
    result.categoriesPath = nil;
  }
  result.payload = dict[@"payload"];
  if ((NSNull *)result.payload == [NSNull null]) {
    result.payload = nil;
  }
  result.actualPrice = [YMMFECommercePricePigeon fromMap:dict[@"actualPrice"]];
  if ((NSNull *)result.actualPrice == [NSNull null]) {
    result.actualPrice = nil;
  }
  result.originalPrice = [YMMFECommercePricePigeon fromMap:dict[@"originalPrice"]];
  if ((NSNull *)result.originalPrice == [NSNull null]) {
    result.originalPrice = nil;
  }
  result.promocodes = dict[@"promocodes"];
  if ((NSNull *)result.promocodes == [NSNull null]) {
    result.promocodes = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.isNull ? self.isNull : [NSNull null]), @"isNull", (self.sku ? self.sku : [NSNull null]), @"sku", (self.name ? self.name : [NSNull null]), @"name", (self.categoriesPath ? self.categoriesPath : [NSNull null]), @"categoriesPath", (self.payload ? self.payload : [NSNull null]), @"payload", (self.actualPrice ? [self.actualPrice toMap] : [NSNull null]), @"actualPrice", (self.originalPrice ? [self.originalPrice toMap] : [NSNull null]), @"originalPrice", (self.promocodes ? self.promocodes : [NSNull null]), @"promocodes", nil];
}
@end

@implementation YMMFECommercePricePigeon
+ (YMMFECommercePricePigeon *)fromMap:(NSDictionary *)dict {
  YMMFECommercePricePigeon *result = [[YMMFECommercePricePigeon alloc] init];
  result.isNull = dict[@"isNull"];
  if ((NSNull *)result.isNull == [NSNull null]) {
    result.isNull = nil;
  }
  result.fiat = [YMMFECommerceAmountPigeon fromMap:dict[@"fiat"]];
  if ((NSNull *)result.fiat == [NSNull null]) {
    result.fiat = nil;
  }
  result.internalComponents = dict[@"internalComponents"];
  if ((NSNull *)result.internalComponents == [NSNull null]) {
    result.internalComponents = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.isNull ? self.isNull : [NSNull null]), @"isNull", (self.fiat ? [self.fiat toMap] : [NSNull null]), @"fiat", (self.internalComponents ? self.internalComponents : [NSNull null]), @"internalComponents", nil];
}
@end

@implementation YMMFECommerceReferrerPigeon
+ (YMMFECommerceReferrerPigeon *)fromMap:(NSDictionary *)dict {
  YMMFECommerceReferrerPigeon *result = [[YMMFECommerceReferrerPigeon alloc] init];
  result.isNull = dict[@"isNull"];
  if ((NSNull *)result.isNull == [NSNull null]) {
    result.isNull = nil;
  }
  result.type = dict[@"type"];
  if ((NSNull *)result.type == [NSNull null]) {
    result.type = nil;
  }
  result.identifier = dict[@"identifier"];
  if ((NSNull *)result.identifier == [NSNull null]) {
    result.identifier = nil;
  }
  result.screen = [YMMFECommerceScreenPigeon fromMap:dict[@"screen"]];
  if ((NSNull *)result.screen == [NSNull null]) {
    result.screen = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.isNull ? self.isNull : [NSNull null]), @"isNull", (self.type ? self.type : [NSNull null]), @"type", (self.identifier ? self.identifier : [NSNull null]), @"identifier", (self.screen ? [self.screen toMap] : [NSNull null]), @"screen", nil];
}
@end

@implementation YMMFECommerceScreenPigeon
+ (YMMFECommerceScreenPigeon *)fromMap:(NSDictionary *)dict {
  YMMFECommerceScreenPigeon *result = [[YMMFECommerceScreenPigeon alloc] init];
  result.isNull = dict[@"isNull"];
  if ((NSNull *)result.isNull == [NSNull null]) {
    result.isNull = nil;
  }
  result.name = dict[@"name"];
  if ((NSNull *)result.name == [NSNull null]) {
    result.name = nil;
  }
  result.categoriesPath = dict[@"categoriesPath"];
  if ((NSNull *)result.categoriesPath == [NSNull null]) {
    result.categoriesPath = nil;
  }
  result.searchQuery = dict[@"searchQuery"];
  if ((NSNull *)result.searchQuery == [NSNull null]) {
    result.searchQuery = nil;
  }
  result.payload = dict[@"payload"];
  if ((NSNull *)result.payload == [NSNull null]) {
    result.payload = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.isNull ? self.isNull : [NSNull null]), @"isNull", (self.name ? self.name : [NSNull null]), @"name", (self.categoriesPath ? self.categoriesPath : [NSNull null]), @"categoriesPath", (self.searchQuery ? self.searchQuery : [NSNull null]), @"searchQuery", (self.payload ? self.payload : [NSNull null]), @"payload", nil];
}
@end

@implementation YMMFECommerceCartItemPigeon
+ (YMMFECommerceCartItemPigeon *)fromMap:(NSDictionary *)dict {
  YMMFECommerceCartItemPigeon *result = [[YMMFECommerceCartItemPigeon alloc] init];
  result.isNull = dict[@"isNull"];
  if ((NSNull *)result.isNull == [NSNull null]) {
    result.isNull = nil;
  }
  result.product = [YMMFECommerceProductPigeon fromMap:dict[@"product"]];
  if ((NSNull *)result.product == [NSNull null]) {
    result.product = nil;
  }
  result.quantity = dict[@"quantity"];
  if ((NSNull *)result.quantity == [NSNull null]) {
    result.quantity = nil;
  }
  result.revenue = [YMMFECommercePricePigeon fromMap:dict[@"revenue"]];
  if ((NSNull *)result.revenue == [NSNull null]) {
    result.revenue = nil;
  }
  result.referrer = [YMMFECommerceReferrerPigeon fromMap:dict[@"referrer"]];
  if ((NSNull *)result.referrer == [NSNull null]) {
    result.referrer = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.isNull ? self.isNull : [NSNull null]), @"isNull", (self.product ? [self.product toMap] : [NSNull null]), @"product", (self.quantity ? self.quantity : [NSNull null]), @"quantity", (self.revenue ? [self.revenue toMap] : [NSNull null]), @"revenue", (self.referrer ? [self.referrer toMap] : [NSNull null]), @"referrer", nil];
}
@end

@implementation YMMFECommerceOrderPigeon
+ (YMMFECommerceOrderPigeon *)fromMap:(NSDictionary *)dict {
  YMMFECommerceOrderPigeon *result = [[YMMFECommerceOrderPigeon alloc] init];
  result.isNull = dict[@"isNull"];
  if ((NSNull *)result.isNull == [NSNull null]) {
    result.isNull = nil;
  }
  result.identifier = dict[@"identifier"];
  if ((NSNull *)result.identifier == [NSNull null]) {
    result.identifier = nil;
  }
  result.items = dict[@"items"];
  if ((NSNull *)result.items == [NSNull null]) {
    result.items = nil;
  }
  result.payload = dict[@"payload"];
  if ((NSNull *)result.payload == [NSNull null]) {
    result.payload = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.isNull ? self.isNull : [NSNull null]), @"isNull", (self.identifier ? self.identifier : [NSNull null]), @"identifier", (self.items ? self.items : [NSNull null]), @"items", (self.payload ? self.payload : [NSNull null]), @"payload", nil];
}
@end

@implementation YMMFECommerceEventPigeon
+ (YMMFECommerceEventPigeon *)fromMap:(NSDictionary *)dict {
  YMMFECommerceEventPigeon *result = [[YMMFECommerceEventPigeon alloc] init];
  result.eventType = dict[@"eventType"];
  if ((NSNull *)result.eventType == [NSNull null]) {
    result.eventType = nil;
  }
  result.amount = [YMMFECommerceAmountPigeon fromMap:dict[@"amount"]];
  if ((NSNull *)result.amount == [NSNull null]) {
    result.amount = nil;
  }
  result.cartItem = [YMMFECommerceCartItemPigeon fromMap:dict[@"cartItem"]];
  if ((NSNull *)result.cartItem == [NSNull null]) {
    result.cartItem = nil;
  }
  result.order = [YMMFECommerceOrderPigeon fromMap:dict[@"order"]];
  if ((NSNull *)result.order == [NSNull null]) {
    result.order = nil;
  }
  result.price = [YMMFECommercePricePigeon fromMap:dict[@"price"]];
  if ((NSNull *)result.price == [NSNull null]) {
    result.price = nil;
  }
  result.product = [YMMFECommerceProductPigeon fromMap:dict[@"product"]];
  if ((NSNull *)result.product == [NSNull null]) {
    result.product = nil;
  }
  result.referrer = [YMMFECommerceReferrerPigeon fromMap:dict[@"referrer"]];
  if ((NSNull *)result.referrer == [NSNull null]) {
    result.referrer = nil;
  }
  result.screen = [YMMFECommerceScreenPigeon fromMap:dict[@"screen"]];
  if ((NSNull *)result.screen == [NSNull null]) {
    result.screen = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.eventType ? self.eventType : [NSNull null]), @"eventType", (self.amount ? [self.amount toMap] : [NSNull null]), @"amount", (self.cartItem ? [self.cartItem toMap] : [NSNull null]), @"cartItem", (self.order ? [self.order toMap] : [NSNull null]), @"order", (self.price ? [self.price toMap] : [NSNull null]), @"price", (self.product ? [self.product toMap] : [NSNull null]), @"product", (self.referrer ? [self.referrer toMap] : [NSNull null]), @"referrer", (self.screen ? [self.screen toMap] : [NSNull null]), @"screen", nil];
}
@end

@implementation YMMFStackTraceElementPigeon
+ (YMMFStackTraceElementPigeon *)fromMap:(NSDictionary *)dict {
  YMMFStackTraceElementPigeon *result = [[YMMFStackTraceElementPigeon alloc] init];
  result.className = dict[@"className"];
  if ((NSNull *)result.className == [NSNull null]) {
    result.className = nil;
  }
  result.fileName = dict[@"fileName"];
  if ((NSNull *)result.fileName == [NSNull null]) {
    result.fileName = nil;
  }
  result.line = dict[@"line"];
  if ((NSNull *)result.line == [NSNull null]) {
    result.line = nil;
  }
  result.column = dict[@"column"];
  if ((NSNull *)result.column == [NSNull null]) {
    result.column = nil;
  }
  result.methodName = dict[@"methodName"];
  if ((NSNull *)result.methodName == [NSNull null]) {
    result.methodName = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.className ? self.className : [NSNull null]), @"className", (self.fileName ? self.fileName : [NSNull null]), @"fileName", (self.line ? self.line : [NSNull null]), @"line", (self.column ? self.column : [NSNull null]), @"column", (self.methodName ? self.methodName : [NSNull null]), @"methodName", nil];
}
@end

@implementation YMMFErrorDetailsPigeon
+ (YMMFErrorDetailsPigeon *)fromMap:(NSDictionary *)dict {
  YMMFErrorDetailsPigeon *result = [[YMMFErrorDetailsPigeon alloc] init];
  result.isNull = dict[@"isNull"];
  if ((NSNull *)result.isNull == [NSNull null]) {
    result.isNull = nil;
  }
  result.exceptionClass = dict[@"exceptionClass"];
  if ((NSNull *)result.exceptionClass == [NSNull null]) {
    result.exceptionClass = nil;
  }
  result.message = dict[@"message"];
  if ((NSNull *)result.message == [NSNull null]) {
    result.message = nil;
  }
  result.dartVersion = dict[@"dartVersion"];
  if ((NSNull *)result.dartVersion == [NSNull null]) {
    result.dartVersion = nil;
  }
  result.backtrace = dict[@"backtrace"];
  if ((NSNull *)result.backtrace == [NSNull null]) {
    result.backtrace = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.isNull ? self.isNull : [NSNull null]), @"isNull", (self.exceptionClass ? self.exceptionClass : [NSNull null]), @"exceptionClass", (self.message ? self.message : [NSNull null]), @"message", (self.dartVersion ? self.dartVersion : [NSNull null]), @"dartVersion", (self.backtrace ? self.backtrace : [NSNull null]), @"backtrace", nil];
}
@end

@implementation YMMFUserProfileAttributePigeon
+ (YMMFUserProfileAttributePigeon *)fromMap:(NSDictionary *)dict {
  YMMFUserProfileAttributePigeon *result = [[YMMFUserProfileAttributePigeon alloc] init];
  result.key = dict[@"key"];
  if ((NSNull *)result.key == [NSNull null]) {
    result.key = nil;
  }
  result.doubleValue = dict[@"doubleValue"];
  if ((NSNull *)result.doubleValue == [NSNull null]) {
    result.doubleValue = nil;
  }
  result.stringValue = dict[@"stringValue"];
  if ((NSNull *)result.stringValue == [NSNull null]) {
    result.stringValue = nil;
  }
  result.boolValue = dict[@"boolValue"];
  if ((NSNull *)result.boolValue == [NSNull null]) {
    result.boolValue = nil;
  }
  result.year = dict[@"year"];
  if ((NSNull *)result.year == [NSNull null]) {
    result.year = nil;
  }
  result.month = dict[@"month"];
  if ((NSNull *)result.month == [NSNull null]) {
    result.month = nil;
  }
  result.day = dict[@"day"];
  if ((NSNull *)result.day == [NSNull null]) {
    result.day = nil;
  }
  result.age = dict[@"age"];
  if ((NSNull *)result.age == [NSNull null]) {
    result.age = nil;
  }
  result.genderValue = [dict[@"genderValue"] integerValue];
  result.ifUndefined = dict[@"ifUndefined"];
  if ((NSNull *)result.ifUndefined == [NSNull null]) {
    result.ifUndefined = nil;
  }
  result.reset = dict[@"reset"];
  if ((NSNull *)result.reset == [NSNull null]) {
    result.reset = nil;
  }
  result.type = [dict[@"type"] integerValue];
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.key ? self.key : [NSNull null]), @"key", (self.doubleValue ? self.doubleValue : [NSNull null]), @"doubleValue", (self.stringValue ? self.stringValue : [NSNull null]), @"stringValue", (self.boolValue ? self.boolValue : [NSNull null]), @"boolValue", (self.year ? self.year : [NSNull null]), @"year", (self.month ? self.month : [NSNull null]), @"month", (self.day ? self.day : [NSNull null]), @"day", (self.age ? self.age : [NSNull null]), @"age", @(self.genderValue), @"genderValue", (self.ifUndefined ? self.ifUndefined : [NSNull null]), @"ifUndefined", (self.reset ? self.reset : [NSNull null]), @"reset", @(self.type), @"type", nil];
}
@end

@implementation YMMFUserProfilePigeon
+ (YMMFUserProfilePigeon *)fromMap:(NSDictionary *)dict {
  YMMFUserProfilePigeon *result = [[YMMFUserProfilePigeon alloc] init];
  result.attributes = dict[@"attributes"];
  if ((NSNull *)result.attributes == [NSNull null]) {
    result.attributes = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.attributes ? self.attributes : [NSNull null]), @"attributes", nil];
}
@end

@implementation YMMFReporterConfigPigeon
+ (YMMFReporterConfigPigeon *)fromMap:(NSDictionary *)dict {
  YMMFReporterConfigPigeon *result = [[YMMFReporterConfigPigeon alloc] init];
  result.apiKey = dict[@"apiKey"];
  if ((NSNull *)result.apiKey == [NSNull null]) {
    result.apiKey = nil;
  }
  result.sessionTimeout = dict[@"sessionTimeout"];
  if ((NSNull *)result.sessionTimeout == [NSNull null]) {
    result.sessionTimeout = nil;
  }
  result.statisticsSending = dict[@"statisticsSending"];
  if ((NSNull *)result.statisticsSending == [NSNull null]) {
    result.statisticsSending = nil;
  }
  result.maxReportsInDatabaseCount = dict[@"maxReportsInDatabaseCount"];
  if ((NSNull *)result.maxReportsInDatabaseCount == [NSNull null]) {
    result.maxReportsInDatabaseCount = nil;
  }
  result.userProfileID = dict[@"userProfileID"];
  if ((NSNull *)result.userProfileID == [NSNull null]) {
    result.userProfileID = nil;
  }
  result.logs = dict[@"logs"];
  if ((NSNull *)result.logs == [NSNull null]) {
    result.logs = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.apiKey ? self.apiKey : [NSNull null]), @"apiKey", (self.sessionTimeout ? self.sessionTimeout : [NSNull null]), @"sessionTimeout", (self.statisticsSending ? self.statisticsSending : [NSNull null]), @"statisticsSending", (self.maxReportsInDatabaseCount ? self.maxReportsInDatabaseCount : [NSNull null]), @"maxReportsInDatabaseCount", (self.userProfileID ? self.userProfileID : [NSNull null]), @"userProfileID", (self.logs ? self.logs : [NSNull null]), @"logs", nil];
}
@end

@interface YMMFAppMetricaConfigConverterPigeonCodecReader : FlutterStandardReader
@end
@implementation YMMFAppMetricaConfigConverterPigeonCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [YMMFAppMetricaConfigPigeon fromMap:[self readValue]];
    
    case 129:     
      return [YMMFLocationPigeon fromMap:[self readValue]];
    
    case 130:     
      return [YMMFPreloadInfoPigeon fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface YMMFAppMetricaConfigConverterPigeonCodecWriter : FlutterStandardWriter
@end
@implementation YMMFAppMetricaConfigConverterPigeonCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[YMMFAppMetricaConfigPigeon class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFLocationPigeon class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFPreloadInfoPigeon class]]) {
    [self writeByte:130];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface YMMFAppMetricaConfigConverterPigeonCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation YMMFAppMetricaConfigConverterPigeonCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[YMMFAppMetricaConfigConverterPigeonCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[YMMFAppMetricaConfigConverterPigeonCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *YMMFAppMetricaConfigConverterPigeonGetCodec() {
  static dispatch_once_t s_pred = 0;
  static FlutterStandardMessageCodec *s_sharedObject = nil;
  dispatch_once(&s_pred, ^{
    YMMFAppMetricaConfigConverterPigeonCodecReaderWriter *readerWriter = [[YMMFAppMetricaConfigConverterPigeonCodecReaderWriter alloc] init];
    s_sharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return s_sharedObject;
}


void YMMFAppMetricaConfigConverterPigeonSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<YMMFAppMetricaConfigConverterPigeon> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AppMetricaConfigConverterPigeon.toJson"
        binaryMessenger:binaryMessenger
        codec:YMMFAppMetricaConfigConverterPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(toJsonConfig:error:)], @"YMMFAppMetricaConfigConverterPigeon api (%@) doesn't respond to @selector(toJsonConfig:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        YMMFAppMetricaConfigPigeon *arg_config = args[0];
        FlutterError *error;
        NSString *output = [api toJsonConfig:arg_config error:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface YMMFAppMetricaPigeonCodecReader : FlutterStandardReader
@end
@implementation YMMFAppMetricaPigeonCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [YMMFAppMetricaConfigPigeon fromMap:[self readValue]];
    
    case 129:     
      return [YMMFAppMetricaDeferredDeeplinkErrorPigeon fromMap:[self readValue]];
    
    case 130:     
      return [YMMFAppMetricaDeferredDeeplinkParametersPigeon fromMap:[self readValue]];
    
    case 131:     
      return [YMMFAppMetricaDeferredDeeplinkPigeon fromMap:[self readValue]];
    
    case 132:     
      return [YMMFAppMetricaDeviceIdPigeon fromMap:[self readValue]];
    
    case 133:     
      return [YMMFECommerceAmountPigeon fromMap:[self readValue]];
    
    case 134:     
      return [YMMFECommerceAmountPigeon fromMap:[self readValue]];
    
    case 135:     
      return [YMMFECommerceCartItemPigeon fromMap:[self readValue]];
    
    case 136:     
      return [YMMFECommerceEventPigeon fromMap:[self readValue]];
    
    case 137:     
      return [YMMFECommerceOrderPigeon fromMap:[self readValue]];
    
    case 138:     
      return [YMMFECommercePricePigeon fromMap:[self readValue]];
    
    case 139:     
      return [YMMFECommercePricePigeon fromMap:[self readValue]];
    
    case 140:     
      return [YMMFECommerceProductPigeon fromMap:[self readValue]];
    
    case 141:     
      return [YMMFECommerceProductPigeon fromMap:[self readValue]];
    
    case 142:     
      return [YMMFECommerceReferrerPigeon fromMap:[self readValue]];
    
    case 143:     
      return [YMMFECommerceScreenPigeon fromMap:[self readValue]];
    
    case 144:     
      return [YMMFErrorDetailsPigeon fromMap:[self readValue]];
    
    case 145:     
      return [YMMFLocationPigeon fromMap:[self readValue]];
    
    case 146:     
      return [YMMFPreloadInfoPigeon fromMap:[self readValue]];
    
    case 147:     
      return [YMMFReceiptPigeon fromMap:[self readValue]];
    
    case 148:     
      return [YMMFReporterConfigPigeon fromMap:[self readValue]];
    
    case 149:     
      return [YMMFRevenuePigeon fromMap:[self readValue]];
    
    case 150:     
      return [YMMFStackTraceElementPigeon fromMap:[self readValue]];
    
    case 151:     
      return [YMMFStringPigeonWrapper fromMap:[self readValue]];
    
    case 152:     
      return [YMMFUserProfileAttributePigeon fromMap:[self readValue]];
    
    case 153:     
      return [YMMFUserProfilePigeon fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface YMMFAppMetricaPigeonCodecWriter : FlutterStandardWriter
@end
@implementation YMMFAppMetricaPigeonCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[YMMFAppMetricaConfigPigeon class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFAppMetricaDeferredDeeplinkErrorPigeon class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFAppMetricaDeferredDeeplinkParametersPigeon class]]) {
    [self writeByte:130];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFAppMetricaDeferredDeeplinkPigeon class]]) {
    [self writeByte:131];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFAppMetricaDeviceIdPigeon class]]) {
    [self writeByte:132];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFECommerceAmountPigeon class]]) {
    [self writeByte:133];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFECommerceAmountPigeon class]]) {
    [self writeByte:134];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFECommerceCartItemPigeon class]]) {
    [self writeByte:135];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFECommerceEventPigeon class]]) {
    [self writeByte:136];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFECommerceOrderPigeon class]]) {
    [self writeByte:137];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFECommercePricePigeon class]]) {
    [self writeByte:138];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFECommercePricePigeon class]]) {
    [self writeByte:139];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFECommerceProductPigeon class]]) {
    [self writeByte:140];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFECommerceProductPigeon class]]) {
    [self writeByte:141];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFECommerceReferrerPigeon class]]) {
    [self writeByte:142];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFECommerceScreenPigeon class]]) {
    [self writeByte:143];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFErrorDetailsPigeon class]]) {
    [self writeByte:144];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFLocationPigeon class]]) {
    [self writeByte:145];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFPreloadInfoPigeon class]]) {
    [self writeByte:146];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFReceiptPigeon class]]) {
    [self writeByte:147];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFReporterConfigPigeon class]]) {
    [self writeByte:148];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFRevenuePigeon class]]) {
    [self writeByte:149];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFStackTraceElementPigeon class]]) {
    [self writeByte:150];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFStringPigeonWrapper class]]) {
    [self writeByte:151];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFUserProfileAttributePigeon class]]) {
    [self writeByte:152];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFUserProfilePigeon class]]) {
    [self writeByte:153];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface YMMFAppMetricaPigeonCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation YMMFAppMetricaPigeonCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[YMMFAppMetricaPigeonCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[YMMFAppMetricaPigeonCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *YMMFAppMetricaPigeonGetCodec() {
  static dispatch_once_t s_pred = 0;
  static FlutterStandardMessageCodec *s_sharedObject = nil;
  dispatch_once(&s_pred, ^{
    YMMFAppMetricaPigeonCodecReaderWriter *readerWriter = [[YMMFAppMetricaPigeonCodecReaderWriter alloc] init];
    s_sharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return s_sharedObject;
}


void YMMFAppMetricaPigeonSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<YMMFAppMetricaPigeon> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AppMetricaPigeon.activate"
        binaryMessenger:binaryMessenger
        codec:YMMFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(activateConfig:error:)], @"YMMFAppMetricaPigeon api (%@) doesn't respond to @selector(activateConfig:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        YMMFAppMetricaConfigPigeon *arg_config = args[0];
        FlutterError *error;
        [api activateConfig:arg_config error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AppMetricaPigeon.activateReporter"
        binaryMessenger:binaryMessenger
        codec:YMMFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(activateReporterConfig:error:)], @"YMMFAppMetricaPigeon api (%@) doesn't respond to @selector(activateReporterConfig:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        YMMFReporterConfigPigeon *arg_config = args[0];
        FlutterError *error;
        [api activateReporterConfig:arg_config error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AppMetricaPigeon.touchReporter"
        binaryMessenger:binaryMessenger
        codec:YMMFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(touchReporterApiKey:error:)], @"YMMFAppMetricaPigeon api (%@) doesn't respond to @selector(touchReporterApiKey:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_apiKey = args[0];
        FlutterError *error;
        [api touchReporterApiKey:arg_apiKey error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AppMetricaPigeon.getLibraryApiLevel"
        binaryMessenger:binaryMessenger
        codec:YMMFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getLibraryApiLevelWithError:)], @"YMMFAppMetricaPigeon api (%@) doesn't respond to @selector(getLibraryApiLevelWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSNumber *output = [api getLibraryApiLevelWithError:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AppMetricaPigeon.getLibraryVersion"
        binaryMessenger:binaryMessenger
        codec:YMMFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getLibraryVersionWithError:)], @"YMMFAppMetricaPigeon api (%@) doesn't respond to @selector(getLibraryVersionWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSString *output = [api getLibraryVersionWithError:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AppMetricaPigeon.resumeSession"
        binaryMessenger:binaryMessenger
        codec:YMMFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(resumeSessionWithError:)], @"YMMFAppMetricaPigeon api (%@) doesn't respond to @selector(resumeSessionWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api resumeSessionWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AppMetricaPigeon.pauseSession"
        binaryMessenger:binaryMessenger
        codec:YMMFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(pauseSessionWithError:)], @"YMMFAppMetricaPigeon api (%@) doesn't respond to @selector(pauseSessionWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api pauseSessionWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AppMetricaPigeon.reportAppOpen"
        binaryMessenger:binaryMessenger
        codec:YMMFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportAppOpenDeeplink:error:)], @"YMMFAppMetricaPigeon api (%@) doesn't respond to @selector(reportAppOpenDeeplink:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        YMMFStringPigeonWrapper *arg_deeplink = args[0];
        FlutterError *error;
        [api reportAppOpenDeeplink:arg_deeplink error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AppMetricaPigeon.reportError"
        binaryMessenger:binaryMessenger
        codec:YMMFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportErrorError:message:error:)], @"YMMFAppMetricaPigeon api (%@) doesn't respond to @selector(reportErrorError:message:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        YMMFErrorDetailsPigeon *arg_error = args[0];
        YMMFStringPigeonWrapper *arg_message = args[1];
        FlutterError *error;
        [api reportErrorError:arg_error message:arg_message error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AppMetricaPigeon.reportErrorWithGroup"
        binaryMessenger:binaryMessenger
        codec:YMMFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportErrorWithGroupGroupId:error:message:error:)], @"YMMFAppMetricaPigeon api (%@) doesn't respond to @selector(reportErrorWithGroupGroupId:error:message:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_groupId = args[0];
        YMMFErrorDetailsPigeon *arg_error = args[1];
        YMMFStringPigeonWrapper *arg_message = args[2];
        FlutterError *error;
        [api reportErrorWithGroupGroupId:arg_groupId error:arg_error message:arg_message error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AppMetricaPigeon.reportUnhandledException"
        binaryMessenger:binaryMessenger
        codec:YMMFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportUnhandledExceptionError:error:)], @"YMMFAppMetricaPigeon api (%@) doesn't respond to @selector(reportUnhandledExceptionError:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        YMMFErrorDetailsPigeon *arg_error = args[0];
        FlutterError *error;
        [api reportUnhandledExceptionError:arg_error error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AppMetricaPigeon.reportEventWithJson"
        binaryMessenger:binaryMessenger
        codec:YMMFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportEventWithJsonEventName:attributesJson:error:)], @"YMMFAppMetricaPigeon api (%@) doesn't respond to @selector(reportEventWithJsonEventName:attributesJson:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_eventName = args[0];
        YMMFStringPigeonWrapper *arg_attributesJson = args[1];
        FlutterError *error;
        [api reportEventWithJsonEventName:arg_eventName attributesJson:arg_attributesJson error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AppMetricaPigeon.reportEvent"
        binaryMessenger:binaryMessenger
        codec:YMMFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportEventEventName:error:)], @"YMMFAppMetricaPigeon api (%@) doesn't respond to @selector(reportEventEventName:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_eventName = args[0];
        FlutterError *error;
        [api reportEventEventName:arg_eventName error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AppMetricaPigeon.reportReferralUrl"
        binaryMessenger:binaryMessenger
        codec:YMMFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportReferralUrlReferralUrl:error:)], @"YMMFAppMetricaPigeon api (%@) doesn't respond to @selector(reportReferralUrlReferralUrl:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_referralUrl = args[0];
        FlutterError *error;
        [api reportReferralUrlReferralUrl:arg_referralUrl error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AppMetricaPigeon.requestDeferredDeeplink"
        binaryMessenger:binaryMessenger
        codec:YMMFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(requestDeferredDeeplinkWithCompletion:)], @"YMMFAppMetricaPigeon api (%@) doesn't respond to @selector(requestDeferredDeeplinkWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api requestDeferredDeeplinkWithCompletion:^(YMMFAppMetricaDeferredDeeplinkPigeon *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AppMetricaPigeon.requestDeferredDeeplinkParameters"
        binaryMessenger:binaryMessenger
        codec:YMMFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(requestDeferredDeeplinkParametersWithCompletion:)], @"YMMFAppMetricaPigeon api (%@) doesn't respond to @selector(requestDeferredDeeplinkParametersWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api requestDeferredDeeplinkParametersWithCompletion:^(YMMFAppMetricaDeferredDeeplinkParametersPigeon *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AppMetricaPigeon.requestAppMetricaDeviceID"
        binaryMessenger:binaryMessenger
        codec:YMMFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(requestAppMetricaDeviceIDWithCompletion:)], @"YMMFAppMetricaPigeon api (%@) doesn't respond to @selector(requestAppMetricaDeviceIDWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api requestAppMetricaDeviceIDWithCompletion:^(YMMFAppMetricaDeviceIdPigeon *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AppMetricaPigeon.sendEventsBuffer"
        binaryMessenger:binaryMessenger
        codec:YMMFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(sendEventsBufferWithError:)], @"YMMFAppMetricaPigeon api (%@) doesn't respond to @selector(sendEventsBufferWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api sendEventsBufferWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AppMetricaPigeon.setLocation"
        binaryMessenger:binaryMessenger
        codec:YMMFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setLocationLocation:error:)], @"YMMFAppMetricaPigeon api (%@) doesn't respond to @selector(setLocationLocation:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        YMMFLocationPigeon *arg_location = args[0];
        FlutterError *error;
        [api setLocationLocation:arg_location error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AppMetricaPigeon.setLocationTracking"
        binaryMessenger:binaryMessenger
        codec:YMMFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setLocationTrackingEnabled:error:)], @"YMMFAppMetricaPigeon api (%@) doesn't respond to @selector(setLocationTrackingEnabled:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_enabled = args[0];
        FlutterError *error;
        [api setLocationTrackingEnabled:arg_enabled error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AppMetricaPigeon.setStatisticsSending"
        binaryMessenger:binaryMessenger
        codec:YMMFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setStatisticsSendingEnabled:error:)], @"YMMFAppMetricaPigeon api (%@) doesn't respond to @selector(setStatisticsSendingEnabled:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_enabled = args[0];
        FlutterError *error;
        [api setStatisticsSendingEnabled:arg_enabled error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AppMetricaPigeon.setUserProfileID"
        binaryMessenger:binaryMessenger
        codec:YMMFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setUserProfileIDUserProfileID:error:)], @"YMMFAppMetricaPigeon api (%@) doesn't respond to @selector(setUserProfileIDUserProfileID:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        YMMFStringPigeonWrapper *arg_userProfileID = args[0];
        FlutterError *error;
        [api setUserProfileIDUserProfileID:arg_userProfileID error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AppMetricaPigeon.reportUserProfile"
        binaryMessenger:binaryMessenger
        codec:YMMFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportUserProfileUserProfile:error:)], @"YMMFAppMetricaPigeon api (%@) doesn't respond to @selector(reportUserProfileUserProfile:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        YMMFUserProfilePigeon *arg_userProfile = args[0];
        FlutterError *error;
        [api reportUserProfileUserProfile:arg_userProfile error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AppMetricaPigeon.putErrorEnvironmentValue"
        binaryMessenger:binaryMessenger
        codec:YMMFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(putErrorEnvironmentValueKey:value:error:)], @"YMMFAppMetricaPigeon api (%@) doesn't respond to @selector(putErrorEnvironmentValueKey:value:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_key = args[0];
        YMMFStringPigeonWrapper *arg_value = args[1];
        FlutterError *error;
        [api putErrorEnvironmentValueKey:arg_key value:arg_value error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AppMetricaPigeon.reportRevenue"
        binaryMessenger:binaryMessenger
        codec:YMMFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportRevenueRevenue:error:)], @"YMMFAppMetricaPigeon api (%@) doesn't respond to @selector(reportRevenueRevenue:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        YMMFRevenuePigeon *arg_revenue = args[0];
        FlutterError *error;
        [api reportRevenueRevenue:arg_revenue error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AppMetricaPigeon.reportECommerce"
        binaryMessenger:binaryMessenger
        codec:YMMFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportECommerceEvent:error:)], @"YMMFAppMetricaPigeon api (%@) doesn't respond to @selector(reportECommerceEvent:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        YMMFECommerceEventPigeon *arg_event = args[0];
        FlutterError *error;
        [api reportECommerceEvent:arg_event error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.AppMetricaPigeon.handlePluginInitFinished"
        binaryMessenger:binaryMessenger
        codec:YMMFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(handlePluginInitFinishedWithError:)], @"YMMFAppMetricaPigeon api (%@) doesn't respond to @selector(handlePluginInitFinishedWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api handlePluginInitFinishedWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface YMMFReporterPigeonCodecReader : FlutterStandardReader
@end
@implementation YMMFReporterPigeonCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [YMMFECommerceAmountPigeon fromMap:[self readValue]];
    
    case 129:     
      return [YMMFECommerceAmountPigeon fromMap:[self readValue]];
    
    case 130:     
      return [YMMFECommerceCartItemPigeon fromMap:[self readValue]];
    
    case 131:     
      return [YMMFECommerceEventPigeon fromMap:[self readValue]];
    
    case 132:     
      return [YMMFECommerceOrderPigeon fromMap:[self readValue]];
    
    case 133:     
      return [YMMFECommercePricePigeon fromMap:[self readValue]];
    
    case 134:     
      return [YMMFECommercePricePigeon fromMap:[self readValue]];
    
    case 135:     
      return [YMMFECommerceProductPigeon fromMap:[self readValue]];
    
    case 136:     
      return [YMMFECommerceProductPigeon fromMap:[self readValue]];
    
    case 137:     
      return [YMMFECommerceReferrerPigeon fromMap:[self readValue]];
    
    case 138:     
      return [YMMFECommerceScreenPigeon fromMap:[self readValue]];
    
    case 139:     
      return [YMMFErrorDetailsPigeon fromMap:[self readValue]];
    
    case 140:     
      return [YMMFReceiptPigeon fromMap:[self readValue]];
    
    case 141:     
      return [YMMFRevenuePigeon fromMap:[self readValue]];
    
    case 142:     
      return [YMMFStackTraceElementPigeon fromMap:[self readValue]];
    
    case 143:     
      return [YMMFStringPigeonWrapper fromMap:[self readValue]];
    
    case 144:     
      return [YMMFUserProfileAttributePigeon fromMap:[self readValue]];
    
    case 145:     
      return [YMMFUserProfilePigeon fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface YMMFReporterPigeonCodecWriter : FlutterStandardWriter
@end
@implementation YMMFReporterPigeonCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[YMMFECommerceAmountPigeon class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFECommerceAmountPigeon class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFECommerceCartItemPigeon class]]) {
    [self writeByte:130];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFECommerceEventPigeon class]]) {
    [self writeByte:131];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFECommerceOrderPigeon class]]) {
    [self writeByte:132];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFECommercePricePigeon class]]) {
    [self writeByte:133];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFECommercePricePigeon class]]) {
    [self writeByte:134];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFECommerceProductPigeon class]]) {
    [self writeByte:135];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFECommerceProductPigeon class]]) {
    [self writeByte:136];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFECommerceReferrerPigeon class]]) {
    [self writeByte:137];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFECommerceScreenPigeon class]]) {
    [self writeByte:138];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFErrorDetailsPigeon class]]) {
    [self writeByte:139];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFReceiptPigeon class]]) {
    [self writeByte:140];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFRevenuePigeon class]]) {
    [self writeByte:141];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFStackTraceElementPigeon class]]) {
    [self writeByte:142];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFStringPigeonWrapper class]]) {
    [self writeByte:143];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFUserProfileAttributePigeon class]]) {
    [self writeByte:144];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFUserProfilePigeon class]]) {
    [self writeByte:145];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface YMMFReporterPigeonCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation YMMFReporterPigeonCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[YMMFReporterPigeonCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[YMMFReporterPigeonCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *YMMFReporterPigeonGetCodec() {
  static dispatch_once_t s_pred = 0;
  static FlutterStandardMessageCodec *s_sharedObject = nil;
  dispatch_once(&s_pred, ^{
    YMMFReporterPigeonCodecReaderWriter *readerWriter = [[YMMFReporterPigeonCodecReaderWriter alloc] init];
    s_sharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return s_sharedObject;
}


void YMMFReporterPigeonSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<YMMFReporterPigeon> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ReporterPigeon.sendEventsBuffer"
        binaryMessenger:binaryMessenger
        codec:YMMFReporterPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(sendEventsBufferApiKey:error:)], @"YMMFReporterPigeon api (%@) doesn't respond to @selector(sendEventsBufferApiKey:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_apiKey = args[0];
        FlutterError *error;
        [api sendEventsBufferApiKey:arg_apiKey error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ReporterPigeon.reportEvent"
        binaryMessenger:binaryMessenger
        codec:YMMFReporterPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportEventApiKey:eventName:error:)], @"YMMFReporterPigeon api (%@) doesn't respond to @selector(reportEventApiKey:eventName:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_apiKey = args[0];
        NSString *arg_eventName = args[1];
        FlutterError *error;
        [api reportEventApiKey:arg_apiKey eventName:arg_eventName error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ReporterPigeon.reportEventWithJson"
        binaryMessenger:binaryMessenger
        codec:YMMFReporterPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportEventWithJsonApiKey:eventName:attributesJson:error:)], @"YMMFReporterPigeon api (%@) doesn't respond to @selector(reportEventWithJsonApiKey:eventName:attributesJson:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_apiKey = args[0];
        NSString *arg_eventName = args[1];
        YMMFStringPigeonWrapper *arg_attributesJson = args[2];
        FlutterError *error;
        [api reportEventWithJsonApiKey:arg_apiKey eventName:arg_eventName attributesJson:arg_attributesJson error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ReporterPigeon.reportError"
        binaryMessenger:binaryMessenger
        codec:YMMFReporterPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportErrorApiKey:error:message:error:)], @"YMMFReporterPigeon api (%@) doesn't respond to @selector(reportErrorApiKey:error:message:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_apiKey = args[0];
        YMMFErrorDetailsPigeon *arg_error = args[1];
        YMMFStringPigeonWrapper *arg_message = args[2];
        FlutterError *error;
        [api reportErrorApiKey:arg_apiKey error:arg_error message:arg_message error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ReporterPigeon.reportErrorWithGroup"
        binaryMessenger:binaryMessenger
        codec:YMMFReporterPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportErrorWithGroupApiKey:groupId:error:message:error:)], @"YMMFReporterPigeon api (%@) doesn't respond to @selector(reportErrorWithGroupApiKey:groupId:error:message:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_apiKey = args[0];
        NSString *arg_groupId = args[1];
        YMMFErrorDetailsPigeon *arg_error = args[2];
        YMMFStringPigeonWrapper *arg_message = args[3];
        FlutterError *error;
        [api reportErrorWithGroupApiKey:arg_apiKey groupId:arg_groupId error:arg_error message:arg_message error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ReporterPigeon.reportUnhandledException"
        binaryMessenger:binaryMessenger
        codec:YMMFReporterPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportUnhandledExceptionApiKey:error:error:)], @"YMMFReporterPigeon api (%@) doesn't respond to @selector(reportUnhandledExceptionApiKey:error:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_apiKey = args[0];
        YMMFErrorDetailsPigeon *arg_error = args[1];
        FlutterError *error;
        [api reportUnhandledExceptionApiKey:arg_apiKey error:arg_error error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ReporterPigeon.resumeSession"
        binaryMessenger:binaryMessenger
        codec:YMMFReporterPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(resumeSessionApiKey:error:)], @"YMMFReporterPigeon api (%@) doesn't respond to @selector(resumeSessionApiKey:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_apiKey = args[0];
        FlutterError *error;
        [api resumeSessionApiKey:arg_apiKey error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ReporterPigeon.pauseSession"
        binaryMessenger:binaryMessenger
        codec:YMMFReporterPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(pauseSessionApiKey:error:)], @"YMMFReporterPigeon api (%@) doesn't respond to @selector(pauseSessionApiKey:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_apiKey = args[0];
        FlutterError *error;
        [api pauseSessionApiKey:arg_apiKey error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ReporterPigeon.setStatisticsSending"
        binaryMessenger:binaryMessenger
        codec:YMMFReporterPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setStatisticsSendingApiKey:enabled:error:)], @"YMMFReporterPigeon api (%@) doesn't respond to @selector(setStatisticsSendingApiKey:enabled:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_apiKey = args[0];
        NSNumber *arg_enabled = args[1];
        FlutterError *error;
        [api setStatisticsSendingApiKey:arg_apiKey enabled:arg_enabled error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ReporterPigeon.setUserProfileID"
        binaryMessenger:binaryMessenger
        codec:YMMFReporterPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setUserProfileIDApiKey:userProfileID:error:)], @"YMMFReporterPigeon api (%@) doesn't respond to @selector(setUserProfileIDApiKey:userProfileID:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_apiKey = args[0];
        YMMFStringPigeonWrapper *arg_userProfileID = args[1];
        FlutterError *error;
        [api setUserProfileIDApiKey:arg_apiKey userProfileID:arg_userProfileID error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ReporterPigeon.reportUserProfile"
        binaryMessenger:binaryMessenger
        codec:YMMFReporterPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportUserProfileApiKey:userProfile:error:)], @"YMMFReporterPigeon api (%@) doesn't respond to @selector(reportUserProfileApiKey:userProfile:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_apiKey = args[0];
        YMMFUserProfilePigeon *arg_userProfile = args[1];
        FlutterError *error;
        [api reportUserProfileApiKey:arg_apiKey userProfile:arg_userProfile error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ReporterPigeon.reportRevenue"
        binaryMessenger:binaryMessenger
        codec:YMMFReporterPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportRevenueApiKey:revenue:error:)], @"YMMFReporterPigeon api (%@) doesn't respond to @selector(reportRevenueApiKey:revenue:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_apiKey = args[0];
        YMMFRevenuePigeon *arg_revenue = args[1];
        FlutterError *error;
        [api reportRevenueApiKey:arg_apiKey revenue:arg_revenue error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ReporterPigeon.reportECommerce"
        binaryMessenger:binaryMessenger
        codec:YMMFReporterPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportECommerceApiKey:event:error:)], @"YMMFReporterPigeon api (%@) doesn't respond to @selector(reportECommerceApiKey:event:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_apiKey = args[0];
        YMMFECommerceEventPigeon *arg_event = args[1];
        FlutterError *error;
        [api reportECommerceApiKey:arg_apiKey event:arg_event error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
