// Autogenerated from Pigeon (v1.0.9), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.yandex.android.metrica.flutter.pigeon;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Pigeon {

  public enum AppMetricaDeferredDeeplinkReasonPigeon {
    NOT_A_FIRST_LAUNCH(0),
    PARSE_ERROR(1),
    UNKNOWN(2),
    NO_REFERRER(3),
    NO_ERROR(4);

    private int index;
    private AppMetricaDeferredDeeplinkReasonPigeon(final int index) {
      this.index = index;
    }
  }

  public enum AppMetricaDeviceIdReasonPigeon {
    UNKNOWN(0),
    NETWORK(1),
    INVALID_RESPONSE(2),
    NO_ERROR(3);

    private int index;
    private AppMetricaDeviceIdReasonPigeon(final int index) {
      this.index = index;
    }
  }

  public enum UserProfileAttributeType {
    BIRTH_DATE(0),
    BOOLEAN(1),
    COUNTER(2),
    GENDER(3),
    NAME(4),
    NOTIFICATION_ENABLED(5),
    NUMBER(6),
    STRING(7);

    private int index;
    private UserProfileAttributeType(final int index) {
      this.index = index;
    }
  }

  public enum GenderPigeon {
    MALE(0),
    FEMALE(1),
    OTHER(2),
    UNDEFINED(3);

    private int index;
    private GenderPigeon(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class AppMetricaConfigPigeon {
    private String apiKey;
    public String getApiKey() { return apiKey; }
    public void setApiKey(String setterArg) { this.apiKey = setterArg; }

    private String appVersion;
    public String getAppVersion() { return appVersion; }
    public void setAppVersion(String setterArg) { this.appVersion = setterArg; }

    private Boolean crashReporting;
    public Boolean getCrashReporting() { return crashReporting; }
    public void setCrashReporting(Boolean setterArg) { this.crashReporting = setterArg; }

    private Boolean firstActivationAsUpdate;
    public Boolean getFirstActivationAsUpdate() { return firstActivationAsUpdate; }
    public void setFirstActivationAsUpdate(Boolean setterArg) { this.firstActivationAsUpdate = setterArg; }

    private LocationPigeon location;
    public LocationPigeon getLocation() { return location; }
    public void setLocation(LocationPigeon setterArg) { this.location = setterArg; }

    private Boolean locationTracking;
    public Boolean getLocationTracking() { return locationTracking; }
    public void setLocationTracking(Boolean setterArg) { this.locationTracking = setterArg; }

    private Boolean logs;
    public Boolean getLogs() { return logs; }
    public void setLogs(Boolean setterArg) { this.logs = setterArg; }

    private Long sessionTimeout;
    public Long getSessionTimeout() { return sessionTimeout; }
    public void setSessionTimeout(Long setterArg) { this.sessionTimeout = setterArg; }

    private Boolean statisticsSending;
    public Boolean getStatisticsSending() { return statisticsSending; }
    public void setStatisticsSending(Boolean setterArg) { this.statisticsSending = setterArg; }

    private PreloadInfoPigeon preloadInfo;
    public PreloadInfoPigeon getPreloadInfo() { return preloadInfo; }
    public void setPreloadInfo(PreloadInfoPigeon setterArg) { this.preloadInfo = setterArg; }

    private Long maxReportsInDatabaseCount;
    public Long getMaxReportsInDatabaseCount() { return maxReportsInDatabaseCount; }
    public void setMaxReportsInDatabaseCount(Long setterArg) { this.maxReportsInDatabaseCount = setterArg; }

    private Boolean nativeCrashReporting;
    public Boolean getNativeCrashReporting() { return nativeCrashReporting; }
    public void setNativeCrashReporting(Boolean setterArg) { this.nativeCrashReporting = setterArg; }

    private Boolean sessionsAutoTracking;
    public Boolean getSessionsAutoTracking() { return sessionsAutoTracking; }
    public void setSessionsAutoTracking(Boolean setterArg) { this.sessionsAutoTracking = setterArg; }

    private Map<String, String> errorEnvironment;
    public Map<String, String> getErrorEnvironment() { return errorEnvironment; }
    public void setErrorEnvironment(Map<String, String> setterArg) { this.errorEnvironment = setterArg; }

    private String userProfileID;
    public String getUserProfileID() { return userProfileID; }
    public void setUserProfileID(String setterArg) { this.userProfileID = setterArg; }

    private Boolean revenueAutoTracking;
    public Boolean getRevenueAutoTracking() { return revenueAutoTracking; }
    public void setRevenueAutoTracking(Boolean setterArg) { this.revenueAutoTracking = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("apiKey", apiKey);
      toMapResult.put("appVersion", appVersion);
      toMapResult.put("crashReporting", crashReporting);
      toMapResult.put("firstActivationAsUpdate", firstActivationAsUpdate);
      toMapResult.put("location", (location == null) ? null : location.toMap());
      toMapResult.put("locationTracking", locationTracking);
      toMapResult.put("logs", logs);
      toMapResult.put("sessionTimeout", sessionTimeout);
      toMapResult.put("statisticsSending", statisticsSending);
      toMapResult.put("preloadInfo", (preloadInfo == null) ? null : preloadInfo.toMap());
      toMapResult.put("maxReportsInDatabaseCount", maxReportsInDatabaseCount);
      toMapResult.put("nativeCrashReporting", nativeCrashReporting);
      toMapResult.put("sessionsAutoTracking", sessionsAutoTracking);
      toMapResult.put("errorEnvironment", errorEnvironment);
      toMapResult.put("userProfileID", userProfileID);
      toMapResult.put("revenueAutoTracking", revenueAutoTracking);
      return toMapResult;
    }
    static AppMetricaConfigPigeon fromMap(Map<String, Object> map) {
      AppMetricaConfigPigeon fromMapResult = new AppMetricaConfigPigeon();
      Object apiKey = map.get("apiKey");
      fromMapResult.apiKey = (String)apiKey;
      Object appVersion = map.get("appVersion");
      fromMapResult.appVersion = (String)appVersion;
      Object crashReporting = map.get("crashReporting");
      fromMapResult.crashReporting = (Boolean)crashReporting;
      Object firstActivationAsUpdate = map.get("firstActivationAsUpdate");
      fromMapResult.firstActivationAsUpdate = (Boolean)firstActivationAsUpdate;
      Object location = map.get("location");
      fromMapResult.location = LocationPigeon.fromMap((Map)location);
      Object locationTracking = map.get("locationTracking");
      fromMapResult.locationTracking = (Boolean)locationTracking;
      Object logs = map.get("logs");
      fromMapResult.logs = (Boolean)logs;
      Object sessionTimeout = map.get("sessionTimeout");
      fromMapResult.sessionTimeout = (sessionTimeout == null) ? null : ((sessionTimeout instanceof Integer) ? (Integer)sessionTimeout : (Long)sessionTimeout);
      Object statisticsSending = map.get("statisticsSending");
      fromMapResult.statisticsSending = (Boolean)statisticsSending;
      Object preloadInfo = map.get("preloadInfo");
      fromMapResult.preloadInfo = PreloadInfoPigeon.fromMap((Map)preloadInfo);
      Object maxReportsInDatabaseCount = map.get("maxReportsInDatabaseCount");
      fromMapResult.maxReportsInDatabaseCount = (maxReportsInDatabaseCount == null) ? null : ((maxReportsInDatabaseCount instanceof Integer) ? (Integer)maxReportsInDatabaseCount : (Long)maxReportsInDatabaseCount);
      Object nativeCrashReporting = map.get("nativeCrashReporting");
      fromMapResult.nativeCrashReporting = (Boolean)nativeCrashReporting;
      Object sessionsAutoTracking = map.get("sessionsAutoTracking");
      fromMapResult.sessionsAutoTracking = (Boolean)sessionsAutoTracking;
      Object errorEnvironment = map.get("errorEnvironment");
      fromMapResult.errorEnvironment = (Map<String, String>)errorEnvironment;
      Object userProfileID = map.get("userProfileID");
      fromMapResult.userProfileID = (String)userProfileID;
      Object revenueAutoTracking = map.get("revenueAutoTracking");
      fromMapResult.revenueAutoTracking = (Boolean)revenueAutoTracking;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class StringPigeonWrapper {
    private String stringPigeon;
    public String getStringPigeon() { return stringPigeon; }
    public void setStringPigeon(String setterArg) { this.stringPigeon = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("stringPigeon", stringPigeon);
      return toMapResult;
    }
    static StringPigeonWrapper fromMap(Map<String, Object> map) {
      StringPigeonWrapper fromMapResult = new StringPigeonWrapper();
      Object stringPigeon = map.get("stringPigeon");
      fromMapResult.stringPigeon = (String)stringPigeon;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class LocationPigeon {
    private Boolean isNull;
    public Boolean getIsNull() { return isNull; }
    public void setIsNull(Boolean setterArg) { this.isNull = setterArg; }

    private Double latitude;
    public Double getLatitude() { return latitude; }
    public void setLatitude(Double setterArg) { this.latitude = setterArg; }

    private Double longitude;
    public Double getLongitude() { return longitude; }
    public void setLongitude(Double setterArg) { this.longitude = setterArg; }

    private String provider;
    public String getProvider() { return provider; }
    public void setProvider(String setterArg) { this.provider = setterArg; }

    private Double altitude;
    public Double getAltitude() { return altitude; }
    public void setAltitude(Double setterArg) { this.altitude = setterArg; }

    private Double accuracy;
    public Double getAccuracy() { return accuracy; }
    public void setAccuracy(Double setterArg) { this.accuracy = setterArg; }

    private Double course;
    public Double getCourse() { return course; }
    public void setCourse(Double setterArg) { this.course = setterArg; }

    private Double speed;
    public Double getSpeed() { return speed; }
    public void setSpeed(Double setterArg) { this.speed = setterArg; }

    private Long timestamp;
    public Long getTimestamp() { return timestamp; }
    public void setTimestamp(Long setterArg) { this.timestamp = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("isNull", isNull);
      toMapResult.put("latitude", latitude);
      toMapResult.put("longitude", longitude);
      toMapResult.put("provider", provider);
      toMapResult.put("altitude", altitude);
      toMapResult.put("accuracy", accuracy);
      toMapResult.put("course", course);
      toMapResult.put("speed", speed);
      toMapResult.put("timestamp", timestamp);
      return toMapResult;
    }
    static LocationPigeon fromMap(Map<String, Object> map) {
      LocationPigeon fromMapResult = new LocationPigeon();
      Object isNull = map.get("isNull");
      fromMapResult.isNull = (Boolean)isNull;
      Object latitude = map.get("latitude");
      fromMapResult.latitude = (Double)latitude;
      Object longitude = map.get("longitude");
      fromMapResult.longitude = (Double)longitude;
      Object provider = map.get("provider");
      fromMapResult.provider = (String)provider;
      Object altitude = map.get("altitude");
      fromMapResult.altitude = (Double)altitude;
      Object accuracy = map.get("accuracy");
      fromMapResult.accuracy = (Double)accuracy;
      Object course = map.get("course");
      fromMapResult.course = (Double)course;
      Object speed = map.get("speed");
      fromMapResult.speed = (Double)speed;
      Object timestamp = map.get("timestamp");
      fromMapResult.timestamp = (timestamp == null) ? null : ((timestamp instanceof Integer) ? (Integer)timestamp : (Long)timestamp);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PreloadInfoPigeon {
    private Boolean isNull;
    public Boolean getIsNull() { return isNull; }
    public void setIsNull(Boolean setterArg) { this.isNull = setterArg; }

    private String trackingId;
    public String getTrackingId() { return trackingId; }
    public void setTrackingId(String setterArg) { this.trackingId = setterArg; }

    private Map<Object, Object> additionalInfo;
    public Map<Object, Object> getAdditionalInfo() { return additionalInfo; }
    public void setAdditionalInfo(Map<Object, Object> setterArg) { this.additionalInfo = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("isNull", isNull);
      toMapResult.put("trackingId", trackingId);
      toMapResult.put("additionalInfo", additionalInfo);
      return toMapResult;
    }
    static PreloadInfoPigeon fromMap(Map<String, Object> map) {
      PreloadInfoPigeon fromMapResult = new PreloadInfoPigeon();
      Object isNull = map.get("isNull");
      fromMapResult.isNull = (Boolean)isNull;
      Object trackingId = map.get("trackingId");
      fromMapResult.trackingId = (String)trackingId;
      Object additionalInfo = map.get("additionalInfo");
      fromMapResult.additionalInfo = (Map<Object, Object>)additionalInfo;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class AppMetricaDeferredDeeplinkErrorPigeon {
    private AppMetricaDeferredDeeplinkReasonPigeon reason;
    public AppMetricaDeferredDeeplinkReasonPigeon getReason() { return reason; }
    public void setReason(AppMetricaDeferredDeeplinkReasonPigeon setterArg) { this.reason = setterArg; }

    private String description;
    public String getDescription() { return description; }
    public void setDescription(String setterArg) { this.description = setterArg; }

    private String message;
    public String getMessage() { return message; }
    public void setMessage(String setterArg) { this.message = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("reason", reason.index);
      toMapResult.put("description", description);
      toMapResult.put("message", message);
      return toMapResult;
    }
    static AppMetricaDeferredDeeplinkErrorPigeon fromMap(Map<String, Object> map) {
      AppMetricaDeferredDeeplinkErrorPigeon fromMapResult = new AppMetricaDeferredDeeplinkErrorPigeon();
      Object reason = map.get("reason");
      fromMapResult.reason = AppMetricaDeferredDeeplinkReasonPigeon.values()[(int)reason];
      Object description = map.get("description");
      fromMapResult.description = (String)description;
      Object message = map.get("message");
      fromMapResult.message = (String)message;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class AppMetricaDeferredDeeplinkPigeon {
    private String deeplink;
    public String getDeeplink() { return deeplink; }
    public void setDeeplink(String setterArg) { this.deeplink = setterArg; }

    private AppMetricaDeferredDeeplinkErrorPigeon error;
    public AppMetricaDeferredDeeplinkErrorPigeon getError() { return error; }
    public void setError(AppMetricaDeferredDeeplinkErrorPigeon setterArg) { this.error = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("deeplink", deeplink);
      toMapResult.put("error", (error == null) ? null : error.toMap());
      return toMapResult;
    }
    static AppMetricaDeferredDeeplinkPigeon fromMap(Map<String, Object> map) {
      AppMetricaDeferredDeeplinkPigeon fromMapResult = new AppMetricaDeferredDeeplinkPigeon();
      Object deeplink = map.get("deeplink");
      fromMapResult.deeplink = (String)deeplink;
      Object error = map.get("error");
      fromMapResult.error = AppMetricaDeferredDeeplinkErrorPigeon.fromMap((Map)error);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class AppMetricaDeferredDeeplinkParametersPigeon {
    private Map<Object, Object> parameters;
    public Map<Object, Object> getParameters() { return parameters; }
    public void setParameters(Map<Object, Object> setterArg) { this.parameters = setterArg; }

    private AppMetricaDeferredDeeplinkErrorPigeon error;
    public AppMetricaDeferredDeeplinkErrorPigeon getError() { return error; }
    public void setError(AppMetricaDeferredDeeplinkErrorPigeon setterArg) { this.error = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("parameters", parameters);
      toMapResult.put("error", (error == null) ? null : error.toMap());
      return toMapResult;
    }
    static AppMetricaDeferredDeeplinkParametersPigeon fromMap(Map<String, Object> map) {
      AppMetricaDeferredDeeplinkParametersPigeon fromMapResult = new AppMetricaDeferredDeeplinkParametersPigeon();
      Object parameters = map.get("parameters");
      fromMapResult.parameters = (Map<Object, Object>)parameters;
      Object error = map.get("error");
      fromMapResult.error = AppMetricaDeferredDeeplinkErrorPigeon.fromMap((Map)error);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class AppMetricaDeviceIdPigeon {
    private String deviceId;
    public String getDeviceId() { return deviceId; }
    public void setDeviceId(String setterArg) { this.deviceId = setterArg; }

    private AppMetricaDeviceIdReasonPigeon errorReason;
    public AppMetricaDeviceIdReasonPigeon getErrorReason() { return errorReason; }
    public void setErrorReason(AppMetricaDeviceIdReasonPigeon setterArg) { this.errorReason = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("deviceId", deviceId);
      toMapResult.put("errorReason", errorReason.index);
      return toMapResult;
    }
    static AppMetricaDeviceIdPigeon fromMap(Map<String, Object> map) {
      AppMetricaDeviceIdPigeon fromMapResult = new AppMetricaDeviceIdPigeon();
      Object deviceId = map.get("deviceId");
      fromMapResult.deviceId = (String)deviceId;
      Object errorReason = map.get("errorReason");
      fromMapResult.errorReason = AppMetricaDeviceIdReasonPigeon.values()[(int)errorReason];
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class RevenuePigeon {
    private String price;
    public String getPrice() { return price; }
    public void setPrice(String setterArg) { this.price = setterArg; }

    private String currency;
    public String getCurrency() { return currency; }
    public void setCurrency(String setterArg) { this.currency = setterArg; }

    private Long quantity;
    public Long getQuantity() { return quantity; }
    public void setQuantity(Long setterArg) { this.quantity = setterArg; }

    private String productId;
    public String getProductId() { return productId; }
    public void setProductId(String setterArg) { this.productId = setterArg; }

    private String payload;
    public String getPayload() { return payload; }
    public void setPayload(String setterArg) { this.payload = setterArg; }

    private ReceiptPigeon receipt;
    public ReceiptPigeon getReceipt() { return receipt; }
    public void setReceipt(ReceiptPigeon setterArg) { this.receipt = setterArg; }

    private String transactionId;
    public String getTransactionId() { return transactionId; }
    public void setTransactionId(String setterArg) { this.transactionId = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("price", price);
      toMapResult.put("currency", currency);
      toMapResult.put("quantity", quantity);
      toMapResult.put("productId", productId);
      toMapResult.put("payload", payload);
      toMapResult.put("receipt", (receipt == null) ? null : receipt.toMap());
      toMapResult.put("transactionId", transactionId);
      return toMapResult;
    }
    static RevenuePigeon fromMap(Map<String, Object> map) {
      RevenuePigeon fromMapResult = new RevenuePigeon();
      Object price = map.get("price");
      fromMapResult.price = (String)price;
      Object currency = map.get("currency");
      fromMapResult.currency = (String)currency;
      Object quantity = map.get("quantity");
      fromMapResult.quantity = (quantity == null) ? null : ((quantity instanceof Integer) ? (Integer)quantity : (Long)quantity);
      Object productId = map.get("productId");
      fromMapResult.productId = (String)productId;
      Object payload = map.get("payload");
      fromMapResult.payload = (String)payload;
      Object receipt = map.get("receipt");
      fromMapResult.receipt = ReceiptPigeon.fromMap((Map)receipt);
      Object transactionId = map.get("transactionId");
      fromMapResult.transactionId = (String)transactionId;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ReceiptPigeon {
    private Boolean isNull;
    public Boolean getIsNull() { return isNull; }
    public void setIsNull(Boolean setterArg) { this.isNull = setterArg; }

    private String data;
    public String getData() { return data; }
    public void setData(String setterArg) { this.data = setterArg; }

    private String signature;
    public String getSignature() { return signature; }
    public void setSignature(String setterArg) { this.signature = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("isNull", isNull);
      toMapResult.put("data", data);
      toMapResult.put("signature", signature);
      return toMapResult;
    }
    static ReceiptPigeon fromMap(Map<String, Object> map) {
      ReceiptPigeon fromMapResult = new ReceiptPigeon();
      Object isNull = map.get("isNull");
      fromMapResult.isNull = (Boolean)isNull;
      Object data = map.get("data");
      fromMapResult.data = (String)data;
      Object signature = map.get("signature");
      fromMapResult.signature = (String)signature;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ECommerceAmountPigeon {
    private Boolean isNull;
    public Boolean getIsNull() { return isNull; }
    public void setIsNull(Boolean setterArg) { this.isNull = setterArg; }

    private String amount;
    public String getAmount() { return amount; }
    public void setAmount(String setterArg) { this.amount = setterArg; }

    private String currency;
    public String getCurrency() { return currency; }
    public void setCurrency(String setterArg) { this.currency = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("isNull", isNull);
      toMapResult.put("amount", amount);
      toMapResult.put("currency", currency);
      return toMapResult;
    }
    static ECommerceAmountPigeon fromMap(Map<String, Object> map) {
      ECommerceAmountPigeon fromMapResult = new ECommerceAmountPigeon();
      Object isNull = map.get("isNull");
      fromMapResult.isNull = (Boolean)isNull;
      Object amount = map.get("amount");
      fromMapResult.amount = (String)amount;
      Object currency = map.get("currency");
      fromMapResult.currency = (String)currency;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ECommerceProductPigeon {
    private Boolean isNull;
    public Boolean getIsNull() { return isNull; }
    public void setIsNull(Boolean setterArg) { this.isNull = setterArg; }

    private String sku;
    public String getSku() { return sku; }
    public void setSku(String setterArg) { this.sku = setterArg; }

    private String name;
    public String getName() { return name; }
    public void setName(String setterArg) { this.name = setterArg; }

    private List<String> categoriesPath;
    public List<String> getCategoriesPath() { return categoriesPath; }
    public void setCategoriesPath(List<String> setterArg) { this.categoriesPath = setterArg; }

    private Map<String, String> payload;
    public Map<String, String> getPayload() { return payload; }
    public void setPayload(Map<String, String> setterArg) { this.payload = setterArg; }

    private ECommercePricePigeon actualPrice;
    public ECommercePricePigeon getActualPrice() { return actualPrice; }
    public void setActualPrice(ECommercePricePigeon setterArg) { this.actualPrice = setterArg; }

    private ECommercePricePigeon originalPrice;
    public ECommercePricePigeon getOriginalPrice() { return originalPrice; }
    public void setOriginalPrice(ECommercePricePigeon setterArg) { this.originalPrice = setterArg; }

    private List<String> promocodes;
    public List<String> getPromocodes() { return promocodes; }
    public void setPromocodes(List<String> setterArg) { this.promocodes = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("isNull", isNull);
      toMapResult.put("sku", sku);
      toMapResult.put("name", name);
      toMapResult.put("categoriesPath", categoriesPath);
      toMapResult.put("payload", payload);
      toMapResult.put("actualPrice", (actualPrice == null) ? null : actualPrice.toMap());
      toMapResult.put("originalPrice", (originalPrice == null) ? null : originalPrice.toMap());
      toMapResult.put("promocodes", promocodes);
      return toMapResult;
    }
    static ECommerceProductPigeon fromMap(Map<String, Object> map) {
      ECommerceProductPigeon fromMapResult = new ECommerceProductPigeon();
      Object isNull = map.get("isNull");
      fromMapResult.isNull = (Boolean)isNull;
      Object sku = map.get("sku");
      fromMapResult.sku = (String)sku;
      Object name = map.get("name");
      fromMapResult.name = (String)name;
      Object categoriesPath = map.get("categoriesPath");
      fromMapResult.categoriesPath = (List<String>)categoriesPath;
      Object payload = map.get("payload");
      fromMapResult.payload = (Map<String, String>)payload;
      Object actualPrice = map.get("actualPrice");
      fromMapResult.actualPrice = ECommercePricePigeon.fromMap((Map)actualPrice);
      Object originalPrice = map.get("originalPrice");
      fromMapResult.originalPrice = ECommercePricePigeon.fromMap((Map)originalPrice);
      Object promocodes = map.get("promocodes");
      fromMapResult.promocodes = (List<String>)promocodes;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ECommercePricePigeon {
    private Boolean isNull;
    public Boolean getIsNull() { return isNull; }
    public void setIsNull(Boolean setterArg) { this.isNull = setterArg; }

    private ECommerceAmountPigeon fiat;
    public ECommerceAmountPigeon getFiat() { return fiat; }
    public void setFiat(ECommerceAmountPigeon setterArg) { this.fiat = setterArg; }

    private List<ECommerceAmountPigeon> internalComponents;
    public List<ECommerceAmountPigeon> getInternalComponents() { return internalComponents; }
    public void setInternalComponents(List<ECommerceAmountPigeon> setterArg) { this.internalComponents = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("isNull", isNull);
      toMapResult.put("fiat", (fiat == null) ? null : fiat.toMap());
      toMapResult.put("internalComponents", internalComponents);
      return toMapResult;
    }
    static ECommercePricePigeon fromMap(Map<String, Object> map) {
      ECommercePricePigeon fromMapResult = new ECommercePricePigeon();
      Object isNull = map.get("isNull");
      fromMapResult.isNull = (Boolean)isNull;
      Object fiat = map.get("fiat");
      fromMapResult.fiat = ECommerceAmountPigeon.fromMap((Map)fiat);
      Object internalComponents = map.get("internalComponents");
      fromMapResult.internalComponents = (List<ECommerceAmountPigeon>)internalComponents;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ECommerceReferrerPigeon {
    private Boolean isNull;
    public Boolean getIsNull() { return isNull; }
    public void setIsNull(Boolean setterArg) { this.isNull = setterArg; }

    private String type;
    public String getType() { return type; }
    public void setType(String setterArg) { this.type = setterArg; }

    private String identifier;
    public String getIdentifier() { return identifier; }
    public void setIdentifier(String setterArg) { this.identifier = setterArg; }

    private ECommerceScreenPigeon screen;
    public ECommerceScreenPigeon getScreen() { return screen; }
    public void setScreen(ECommerceScreenPigeon setterArg) { this.screen = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("isNull", isNull);
      toMapResult.put("type", type);
      toMapResult.put("identifier", identifier);
      toMapResult.put("screen", (screen == null) ? null : screen.toMap());
      return toMapResult;
    }
    static ECommerceReferrerPigeon fromMap(Map<String, Object> map) {
      ECommerceReferrerPigeon fromMapResult = new ECommerceReferrerPigeon();
      Object isNull = map.get("isNull");
      fromMapResult.isNull = (Boolean)isNull;
      Object type = map.get("type");
      fromMapResult.type = (String)type;
      Object identifier = map.get("identifier");
      fromMapResult.identifier = (String)identifier;
      Object screen = map.get("screen");
      fromMapResult.screen = ECommerceScreenPigeon.fromMap((Map)screen);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ECommerceScreenPigeon {
    private Boolean isNull;
    public Boolean getIsNull() { return isNull; }
    public void setIsNull(Boolean setterArg) { this.isNull = setterArg; }

    private String name;
    public String getName() { return name; }
    public void setName(String setterArg) { this.name = setterArg; }

    private List<String> categoriesPath;
    public List<String> getCategoriesPath() { return categoriesPath; }
    public void setCategoriesPath(List<String> setterArg) { this.categoriesPath = setterArg; }

    private String searchQuery;
    public String getSearchQuery() { return searchQuery; }
    public void setSearchQuery(String setterArg) { this.searchQuery = setterArg; }

    private Map<String, String> payload;
    public Map<String, String> getPayload() { return payload; }
    public void setPayload(Map<String, String> setterArg) { this.payload = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("isNull", isNull);
      toMapResult.put("name", name);
      toMapResult.put("categoriesPath", categoriesPath);
      toMapResult.put("searchQuery", searchQuery);
      toMapResult.put("payload", payload);
      return toMapResult;
    }
    static ECommerceScreenPigeon fromMap(Map<String, Object> map) {
      ECommerceScreenPigeon fromMapResult = new ECommerceScreenPigeon();
      Object isNull = map.get("isNull");
      fromMapResult.isNull = (Boolean)isNull;
      Object name = map.get("name");
      fromMapResult.name = (String)name;
      Object categoriesPath = map.get("categoriesPath");
      fromMapResult.categoriesPath = (List<String>)categoriesPath;
      Object searchQuery = map.get("searchQuery");
      fromMapResult.searchQuery = (String)searchQuery;
      Object payload = map.get("payload");
      fromMapResult.payload = (Map<String, String>)payload;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ECommerceCartItemPigeon {
    private Boolean isNull;
    public Boolean getIsNull() { return isNull; }
    public void setIsNull(Boolean setterArg) { this.isNull = setterArg; }

    private ECommerceProductPigeon product;
    public ECommerceProductPigeon getProduct() { return product; }
    public void setProduct(ECommerceProductPigeon setterArg) { this.product = setterArg; }

    private String quantity;
    public String getQuantity() { return quantity; }
    public void setQuantity(String setterArg) { this.quantity = setterArg; }

    private ECommercePricePigeon revenue;
    public ECommercePricePigeon getRevenue() { return revenue; }
    public void setRevenue(ECommercePricePigeon setterArg) { this.revenue = setterArg; }

    private ECommerceReferrerPigeon referrer;
    public ECommerceReferrerPigeon getReferrer() { return referrer; }
    public void setReferrer(ECommerceReferrerPigeon setterArg) { this.referrer = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("isNull", isNull);
      toMapResult.put("product", (product == null) ? null : product.toMap());
      toMapResult.put("quantity", quantity);
      toMapResult.put("revenue", (revenue == null) ? null : revenue.toMap());
      toMapResult.put("referrer", (referrer == null) ? null : referrer.toMap());
      return toMapResult;
    }
    static ECommerceCartItemPigeon fromMap(Map<String, Object> map) {
      ECommerceCartItemPigeon fromMapResult = new ECommerceCartItemPigeon();
      Object isNull = map.get("isNull");
      fromMapResult.isNull = (Boolean)isNull;
      Object product = map.get("product");
      fromMapResult.product = ECommerceProductPigeon.fromMap((Map)product);
      Object quantity = map.get("quantity");
      fromMapResult.quantity = (String)quantity;
      Object revenue = map.get("revenue");
      fromMapResult.revenue = ECommercePricePigeon.fromMap((Map)revenue);
      Object referrer = map.get("referrer");
      fromMapResult.referrer = ECommerceReferrerPigeon.fromMap((Map)referrer);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ECommerceOrderPigeon {
    private Boolean isNull;
    public Boolean getIsNull() { return isNull; }
    public void setIsNull(Boolean setterArg) { this.isNull = setterArg; }

    private String identifier;
    public String getIdentifier() { return identifier; }
    public void setIdentifier(String setterArg) { this.identifier = setterArg; }

    private List<ECommerceCartItemPigeon> items;
    public List<ECommerceCartItemPigeon> getItems() { return items; }
    public void setItems(List<ECommerceCartItemPigeon> setterArg) { this.items = setterArg; }

    private Map<String, String> payload;
    public Map<String, String> getPayload() { return payload; }
    public void setPayload(Map<String, String> setterArg) { this.payload = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("isNull", isNull);
      toMapResult.put("identifier", identifier);
      toMapResult.put("items", items);
      toMapResult.put("payload", payload);
      return toMapResult;
    }
    static ECommerceOrderPigeon fromMap(Map<String, Object> map) {
      ECommerceOrderPigeon fromMapResult = new ECommerceOrderPigeon();
      Object isNull = map.get("isNull");
      fromMapResult.isNull = (Boolean)isNull;
      Object identifier = map.get("identifier");
      fromMapResult.identifier = (String)identifier;
      Object items = map.get("items");
      fromMapResult.items = (List<ECommerceCartItemPigeon>)items;
      Object payload = map.get("payload");
      fromMapResult.payload = (Map<String, String>)payload;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ECommerceEventPigeon {
    private String eventType;
    public String getEventType() { return eventType; }
    public void setEventType(String setterArg) { this.eventType = setterArg; }

    private ECommerceAmountPigeon amount;
    public ECommerceAmountPigeon getAmount() { return amount; }
    public void setAmount(ECommerceAmountPigeon setterArg) { this.amount = setterArg; }

    private ECommerceCartItemPigeon cartItem;
    public ECommerceCartItemPigeon getCartItem() { return cartItem; }
    public void setCartItem(ECommerceCartItemPigeon setterArg) { this.cartItem = setterArg; }

    private ECommerceOrderPigeon order;
    public ECommerceOrderPigeon getOrder() { return order; }
    public void setOrder(ECommerceOrderPigeon setterArg) { this.order = setterArg; }

    private ECommercePricePigeon price;
    public ECommercePricePigeon getPrice() { return price; }
    public void setPrice(ECommercePricePigeon setterArg) { this.price = setterArg; }

    private ECommerceProductPigeon product;
    public ECommerceProductPigeon getProduct() { return product; }
    public void setProduct(ECommerceProductPigeon setterArg) { this.product = setterArg; }

    private ECommerceReferrerPigeon referrer;
    public ECommerceReferrerPigeon getReferrer() { return referrer; }
    public void setReferrer(ECommerceReferrerPigeon setterArg) { this.referrer = setterArg; }

    private ECommerceScreenPigeon screen;
    public ECommerceScreenPigeon getScreen() { return screen; }
    public void setScreen(ECommerceScreenPigeon setterArg) { this.screen = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("eventType", eventType);
      toMapResult.put("amount", (amount == null) ? null : amount.toMap());
      toMapResult.put("cartItem", (cartItem == null) ? null : cartItem.toMap());
      toMapResult.put("order", (order == null) ? null : order.toMap());
      toMapResult.put("price", (price == null) ? null : price.toMap());
      toMapResult.put("product", (product == null) ? null : product.toMap());
      toMapResult.put("referrer", (referrer == null) ? null : referrer.toMap());
      toMapResult.put("screen", (screen == null) ? null : screen.toMap());
      return toMapResult;
    }
    static ECommerceEventPigeon fromMap(Map<String, Object> map) {
      ECommerceEventPigeon fromMapResult = new ECommerceEventPigeon();
      Object eventType = map.get("eventType");
      fromMapResult.eventType = (String)eventType;
      Object amount = map.get("amount");
      fromMapResult.amount = ECommerceAmountPigeon.fromMap((Map)amount);
      Object cartItem = map.get("cartItem");
      fromMapResult.cartItem = ECommerceCartItemPigeon.fromMap((Map)cartItem);
      Object order = map.get("order");
      fromMapResult.order = ECommerceOrderPigeon.fromMap((Map)order);
      Object price = map.get("price");
      fromMapResult.price = ECommercePricePigeon.fromMap((Map)price);
      Object product = map.get("product");
      fromMapResult.product = ECommerceProductPigeon.fromMap((Map)product);
      Object referrer = map.get("referrer");
      fromMapResult.referrer = ECommerceReferrerPigeon.fromMap((Map)referrer);
      Object screen = map.get("screen");
      fromMapResult.screen = ECommerceScreenPigeon.fromMap((Map)screen);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class StackTraceElementPigeon {
    private String className;
    public String getClassName() { return className; }
    public void setClassName(String setterArg) { this.className = setterArg; }

    private String fileName;
    public String getFileName() { return fileName; }
    public void setFileName(String setterArg) { this.fileName = setterArg; }

    private Long line;
    public Long getLine() { return line; }
    public void setLine(Long setterArg) { this.line = setterArg; }

    private Long column;
    public Long getColumn() { return column; }
    public void setColumn(Long setterArg) { this.column = setterArg; }

    private String methodName;
    public String getMethodName() { return methodName; }
    public void setMethodName(String setterArg) { this.methodName = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("className", className);
      toMapResult.put("fileName", fileName);
      toMapResult.put("line", line);
      toMapResult.put("column", column);
      toMapResult.put("methodName", methodName);
      return toMapResult;
    }
    static StackTraceElementPigeon fromMap(Map<String, Object> map) {
      StackTraceElementPigeon fromMapResult = new StackTraceElementPigeon();
      Object className = map.get("className");
      fromMapResult.className = (String)className;
      Object fileName = map.get("fileName");
      fromMapResult.fileName = (String)fileName;
      Object line = map.get("line");
      fromMapResult.line = (line == null) ? null : ((line instanceof Integer) ? (Integer)line : (Long)line);
      Object column = map.get("column");
      fromMapResult.column = (column == null) ? null : ((column instanceof Integer) ? (Integer)column : (Long)column);
      Object methodName = map.get("methodName");
      fromMapResult.methodName = (String)methodName;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ErrorDetailsPigeon {
    private Boolean isNull;
    public Boolean getIsNull() { return isNull; }
    public void setIsNull(Boolean setterArg) { this.isNull = setterArg; }

    private String exceptionClass;
    public String getExceptionClass() { return exceptionClass; }
    public void setExceptionClass(String setterArg) { this.exceptionClass = setterArg; }

    private String message;
    public String getMessage() { return message; }
    public void setMessage(String setterArg) { this.message = setterArg; }

    private String dartVersion;
    public String getDartVersion() { return dartVersion; }
    public void setDartVersion(String setterArg) { this.dartVersion = setterArg; }

    private List<StackTraceElementPigeon> backtrace;
    public List<StackTraceElementPigeon> getBacktrace() { return backtrace; }
    public void setBacktrace(List<StackTraceElementPigeon> setterArg) { this.backtrace = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("isNull", isNull);
      toMapResult.put("exceptionClass", exceptionClass);
      toMapResult.put("message", message);
      toMapResult.put("dartVersion", dartVersion);
      toMapResult.put("backtrace", backtrace);
      return toMapResult;
    }
    static ErrorDetailsPigeon fromMap(Map<String, Object> map) {
      ErrorDetailsPigeon fromMapResult = new ErrorDetailsPigeon();
      Object isNull = map.get("isNull");
      fromMapResult.isNull = (Boolean)isNull;
      Object exceptionClass = map.get("exceptionClass");
      fromMapResult.exceptionClass = (String)exceptionClass;
      Object message = map.get("message");
      fromMapResult.message = (String)message;
      Object dartVersion = map.get("dartVersion");
      fromMapResult.dartVersion = (String)dartVersion;
      Object backtrace = map.get("backtrace");
      fromMapResult.backtrace = (List<StackTraceElementPigeon>)backtrace;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class UserProfileAttributePigeon {
    private String key;
    public String getKey() { return key; }
    public void setKey(String setterArg) { this.key = setterArg; }

    private Double doubleValue;
    public Double getDoubleValue() { return doubleValue; }
    public void setDoubleValue(Double setterArg) { this.doubleValue = setterArg; }

    private String stringValue;
    public String getStringValue() { return stringValue; }
    public void setStringValue(String setterArg) { this.stringValue = setterArg; }

    private Boolean boolValue;
    public Boolean getBoolValue() { return boolValue; }
    public void setBoolValue(Boolean setterArg) { this.boolValue = setterArg; }

    private Long year;
    public Long getYear() { return year; }
    public void setYear(Long setterArg) { this.year = setterArg; }

    private Long month;
    public Long getMonth() { return month; }
    public void setMonth(Long setterArg) { this.month = setterArg; }

    private Long day;
    public Long getDay() { return day; }
    public void setDay(Long setterArg) { this.day = setterArg; }

    private Long age;
    public Long getAge() { return age; }
    public void setAge(Long setterArg) { this.age = setterArg; }

    private GenderPigeon genderValue;
    public GenderPigeon getGenderValue() { return genderValue; }
    public void setGenderValue(GenderPigeon setterArg) { this.genderValue = setterArg; }

    private Boolean ifUndefined;
    public Boolean getIfUndefined() { return ifUndefined; }
    public void setIfUndefined(Boolean setterArg) { this.ifUndefined = setterArg; }

    private Boolean reset;
    public Boolean getReset() { return reset; }
    public void setReset(Boolean setterArg) { this.reset = setterArg; }

    private UserProfileAttributeType type;
    public UserProfileAttributeType getType() { return type; }
    public void setType(UserProfileAttributeType setterArg) { this.type = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("key", key);
      toMapResult.put("doubleValue", doubleValue);
      toMapResult.put("stringValue", stringValue);
      toMapResult.put("boolValue", boolValue);
      toMapResult.put("year", year);
      toMapResult.put("month", month);
      toMapResult.put("day", day);
      toMapResult.put("age", age);
      toMapResult.put("genderValue", genderValue.index);
      toMapResult.put("ifUndefined", ifUndefined);
      toMapResult.put("reset", reset);
      toMapResult.put("type", type.index);
      return toMapResult;
    }
    static UserProfileAttributePigeon fromMap(Map<String, Object> map) {
      UserProfileAttributePigeon fromMapResult = new UserProfileAttributePigeon();
      Object key = map.get("key");
      fromMapResult.key = (String)key;
      Object doubleValue = map.get("doubleValue");
      fromMapResult.doubleValue = (Double)doubleValue;
      Object stringValue = map.get("stringValue");
      fromMapResult.stringValue = (String)stringValue;
      Object boolValue = map.get("boolValue");
      fromMapResult.boolValue = (Boolean)boolValue;
      Object year = map.get("year");
      fromMapResult.year = (year == null) ? null : ((year instanceof Integer) ? (Integer)year : (Long)year);
      Object month = map.get("month");
      fromMapResult.month = (month == null) ? null : ((month instanceof Integer) ? (Integer)month : (Long)month);
      Object day = map.get("day");
      fromMapResult.day = (day == null) ? null : ((day instanceof Integer) ? (Integer)day : (Long)day);
      Object age = map.get("age");
      fromMapResult.age = (age == null) ? null : ((age instanceof Integer) ? (Integer)age : (Long)age);
      Object genderValue = map.get("genderValue");
      fromMapResult.genderValue = GenderPigeon.values()[(int)genderValue];
      Object ifUndefined = map.get("ifUndefined");
      fromMapResult.ifUndefined = (Boolean)ifUndefined;
      Object reset = map.get("reset");
      fromMapResult.reset = (Boolean)reset;
      Object type = map.get("type");
      fromMapResult.type = UserProfileAttributeType.values()[(int)type];
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class UserProfilePigeon {
    private List<UserProfileAttributePigeon> attributes;
    public List<UserProfileAttributePigeon> getAttributes() { return attributes; }
    public void setAttributes(List<UserProfileAttributePigeon> setterArg) { this.attributes = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("attributes", attributes);
      return toMapResult;
    }
    static UserProfilePigeon fromMap(Map<String, Object> map) {
      UserProfilePigeon fromMapResult = new UserProfilePigeon();
      Object attributes = map.get("attributes");
      fromMapResult.attributes = (List<UserProfileAttributePigeon>)attributes;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ReporterConfigPigeon {
    private String apiKey;
    public String getApiKey() { return apiKey; }
    public void setApiKey(String setterArg) { this.apiKey = setterArg; }

    private Long sessionTimeout;
    public Long getSessionTimeout() { return sessionTimeout; }
    public void setSessionTimeout(Long setterArg) { this.sessionTimeout = setterArg; }

    private Boolean statisticsSending;
    public Boolean getStatisticsSending() { return statisticsSending; }
    public void setStatisticsSending(Boolean setterArg) { this.statisticsSending = setterArg; }

    private Long maxReportsInDatabaseCount;
    public Long getMaxReportsInDatabaseCount() { return maxReportsInDatabaseCount; }
    public void setMaxReportsInDatabaseCount(Long setterArg) { this.maxReportsInDatabaseCount = setterArg; }

    private String userProfileID;
    public String getUserProfileID() { return userProfileID; }
    public void setUserProfileID(String setterArg) { this.userProfileID = setterArg; }

    private Boolean logs;
    public Boolean getLogs() { return logs; }
    public void setLogs(Boolean setterArg) { this.logs = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("apiKey", apiKey);
      toMapResult.put("sessionTimeout", sessionTimeout);
      toMapResult.put("statisticsSending", statisticsSending);
      toMapResult.put("maxReportsInDatabaseCount", maxReportsInDatabaseCount);
      toMapResult.put("userProfileID", userProfileID);
      toMapResult.put("logs", logs);
      return toMapResult;
    }
    static ReporterConfigPigeon fromMap(Map<String, Object> map) {
      ReporterConfigPigeon fromMapResult = new ReporterConfigPigeon();
      Object apiKey = map.get("apiKey");
      fromMapResult.apiKey = (String)apiKey;
      Object sessionTimeout = map.get("sessionTimeout");
      fromMapResult.sessionTimeout = (sessionTimeout == null) ? null : ((sessionTimeout instanceof Integer) ? (Integer)sessionTimeout : (Long)sessionTimeout);
      Object statisticsSending = map.get("statisticsSending");
      fromMapResult.statisticsSending = (Boolean)statisticsSending;
      Object maxReportsInDatabaseCount = map.get("maxReportsInDatabaseCount");
      fromMapResult.maxReportsInDatabaseCount = (maxReportsInDatabaseCount == null) ? null : ((maxReportsInDatabaseCount instanceof Integer) ? (Integer)maxReportsInDatabaseCount : (Long)maxReportsInDatabaseCount);
      Object userProfileID = map.get("userProfileID");
      fromMapResult.userProfileID = (String)userProfileID;
      Object logs = map.get("logs");
      fromMapResult.logs = (Boolean)logs;
      return fromMapResult;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class AppMetricaConfigConverterPigeonCodec extends StandardMessageCodec {
    public static final AppMetricaConfigConverterPigeonCodec INSTANCE = new AppMetricaConfigConverterPigeonCodec();
    private AppMetricaConfigConverterPigeonCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return AppMetricaConfigPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return LocationPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return PreloadInfoPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof AppMetricaConfigPigeon) {
        stream.write(128);
        writeValue(stream, ((AppMetricaConfigPigeon) value).toMap());
      } else 
      if (value instanceof LocationPigeon) {
        stream.write(129);
        writeValue(stream, ((LocationPigeon) value).toMap());
      } else 
      if (value instanceof PreloadInfoPigeon) {
        stream.write(130);
        writeValue(stream, ((PreloadInfoPigeon) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface AppMetricaConfigConverterPigeon {
    String toJson(AppMetricaConfigPigeon config);

    /** The codec used by AppMetricaConfigConverterPigeon. */
    static MessageCodec<Object> getCodec() {
      return AppMetricaConfigConverterPigeonCodec.INSTANCE;
    }

    /** Sets up an instance of `AppMetricaConfigConverterPigeon` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, AppMetricaConfigConverterPigeon api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppMetricaConfigConverterPigeon.toJson", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              AppMetricaConfigPigeon configArg = (AppMetricaConfigPigeon)args.get(0);
              if (configArg == null) {
                throw new NullPointerException("configArg unexpectedly null.");
              }
              String output = api.toJson(configArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class AppMetricaPigeonCodec extends StandardMessageCodec {
    public static final AppMetricaPigeonCodec INSTANCE = new AppMetricaPigeonCodec();
    private AppMetricaPigeonCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return AppMetricaConfigPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return AppMetricaDeferredDeeplinkErrorPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return AppMetricaDeferredDeeplinkParametersPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)131:         
          return AppMetricaDeferredDeeplinkPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)132:         
          return AppMetricaDeviceIdPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)133:         
          return ECommerceAmountPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)134:         
          return ECommerceAmountPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)135:         
          return ECommerceCartItemPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)136:         
          return ECommerceEventPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)137:         
          return ECommerceOrderPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)138:         
          return ECommercePricePigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)139:         
          return ECommercePricePigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)140:         
          return ECommerceProductPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)141:         
          return ECommerceProductPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)142:         
          return ECommerceReferrerPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)143:         
          return ECommerceScreenPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)144:         
          return ErrorDetailsPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)145:         
          return LocationPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)146:         
          return PreloadInfoPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)147:         
          return ReceiptPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)148:         
          return ReporterConfigPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)149:         
          return RevenuePigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)150:         
          return StackTraceElementPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)151:         
          return StringPigeonWrapper.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)152:         
          return UserProfileAttributePigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)153:         
          return UserProfilePigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof AppMetricaConfigPigeon) {
        stream.write(128);
        writeValue(stream, ((AppMetricaConfigPigeon) value).toMap());
      } else 
      if (value instanceof AppMetricaDeferredDeeplinkErrorPigeon) {
        stream.write(129);
        writeValue(stream, ((AppMetricaDeferredDeeplinkErrorPigeon) value).toMap());
      } else 
      if (value instanceof AppMetricaDeferredDeeplinkParametersPigeon) {
        stream.write(130);
        writeValue(stream, ((AppMetricaDeferredDeeplinkParametersPigeon) value).toMap());
      } else 
      if (value instanceof AppMetricaDeferredDeeplinkPigeon) {
        stream.write(131);
        writeValue(stream, ((AppMetricaDeferredDeeplinkPigeon) value).toMap());
      } else 
      if (value instanceof AppMetricaDeviceIdPigeon) {
        stream.write(132);
        writeValue(stream, ((AppMetricaDeviceIdPigeon) value).toMap());
      } else 
      if (value instanceof ECommerceAmountPigeon) {
        stream.write(133);
        writeValue(stream, ((ECommerceAmountPigeon) value).toMap());
      } else 
      if (value instanceof ECommerceAmountPigeon) {
        stream.write(134);
        writeValue(stream, ((ECommerceAmountPigeon) value).toMap());
      } else 
      if (value instanceof ECommerceCartItemPigeon) {
        stream.write(135);
        writeValue(stream, ((ECommerceCartItemPigeon) value).toMap());
      } else 
      if (value instanceof ECommerceEventPigeon) {
        stream.write(136);
        writeValue(stream, ((ECommerceEventPigeon) value).toMap());
      } else 
      if (value instanceof ECommerceOrderPigeon) {
        stream.write(137);
        writeValue(stream, ((ECommerceOrderPigeon) value).toMap());
      } else 
      if (value instanceof ECommercePricePigeon) {
        stream.write(138);
        writeValue(stream, ((ECommercePricePigeon) value).toMap());
      } else 
      if (value instanceof ECommercePricePigeon) {
        stream.write(139);
        writeValue(stream, ((ECommercePricePigeon) value).toMap());
      } else 
      if (value instanceof ECommerceProductPigeon) {
        stream.write(140);
        writeValue(stream, ((ECommerceProductPigeon) value).toMap());
      } else 
      if (value instanceof ECommerceProductPigeon) {
        stream.write(141);
        writeValue(stream, ((ECommerceProductPigeon) value).toMap());
      } else 
      if (value instanceof ECommerceReferrerPigeon) {
        stream.write(142);
        writeValue(stream, ((ECommerceReferrerPigeon) value).toMap());
      } else 
      if (value instanceof ECommerceScreenPigeon) {
        stream.write(143);
        writeValue(stream, ((ECommerceScreenPigeon) value).toMap());
      } else 
      if (value instanceof ErrorDetailsPigeon) {
        stream.write(144);
        writeValue(stream, ((ErrorDetailsPigeon) value).toMap());
      } else 
      if (value instanceof LocationPigeon) {
        stream.write(145);
        writeValue(stream, ((LocationPigeon) value).toMap());
      } else 
      if (value instanceof PreloadInfoPigeon) {
        stream.write(146);
        writeValue(stream, ((PreloadInfoPigeon) value).toMap());
      } else 
      if (value instanceof ReceiptPigeon) {
        stream.write(147);
        writeValue(stream, ((ReceiptPigeon) value).toMap());
      } else 
      if (value instanceof ReporterConfigPigeon) {
        stream.write(148);
        writeValue(stream, ((ReporterConfigPigeon) value).toMap());
      } else 
      if (value instanceof RevenuePigeon) {
        stream.write(149);
        writeValue(stream, ((RevenuePigeon) value).toMap());
      } else 
      if (value instanceof StackTraceElementPigeon) {
        stream.write(150);
        writeValue(stream, ((StackTraceElementPigeon) value).toMap());
      } else 
      if (value instanceof StringPigeonWrapper) {
        stream.write(151);
        writeValue(stream, ((StringPigeonWrapper) value).toMap());
      } else 
      if (value instanceof UserProfileAttributePigeon) {
        stream.write(152);
        writeValue(stream, ((UserProfileAttributePigeon) value).toMap());
      } else 
      if (value instanceof UserProfilePigeon) {
        stream.write(153);
        writeValue(stream, ((UserProfilePigeon) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface AppMetricaPigeon {
    void activate(AppMetricaConfigPigeon config);
    void activateReporter(ReporterConfigPigeon config);
    void touchReporter(String apiKey);
    Long getLibraryApiLevel();
    String getLibraryVersion();
    void resumeSession();
    void pauseSession();
    void reportAppOpen(StringPigeonWrapper deeplink);
    void reportError(ErrorDetailsPigeon error, StringPigeonWrapper message);
    void reportErrorWithGroup(String groupId, ErrorDetailsPigeon error, StringPigeonWrapper message);
    void reportUnhandledException(ErrorDetailsPigeon error);
    void reportEventWithJson(String eventName, StringPigeonWrapper attributesJson);
    void reportEvent(String eventName);
    void reportReferralUrl(String referralUrl);
    void requestDeferredDeeplink(Result<AppMetricaDeferredDeeplinkPigeon> result);
    void requestDeferredDeeplinkParameters(Result<AppMetricaDeferredDeeplinkParametersPigeon> result);
    void requestAppMetricaDeviceID(Result<AppMetricaDeviceIdPigeon> result);
    void sendEventsBuffer();
    void setLocation(LocationPigeon location);
    void setLocationTracking(Boolean enabled);
    void setStatisticsSending(Boolean enabled);
    void setUserProfileID(StringPigeonWrapper userProfileID);
    void reportUserProfile(UserProfilePigeon userProfile);
    void putErrorEnvironmentValue(String key, StringPigeonWrapper value);
    void reportRevenue(RevenuePigeon revenue);
    void reportECommerce(ECommerceEventPigeon event);
    void handlePluginInitFinished();

    /** The codec used by AppMetricaPigeon. */
    static MessageCodec<Object> getCodec() {
      return AppMetricaPigeonCodec.INSTANCE;
    }

    /** Sets up an instance of `AppMetricaPigeon` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, AppMetricaPigeon api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppMetricaPigeon.activate", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              AppMetricaConfigPigeon configArg = (AppMetricaConfigPigeon)args.get(0);
              if (configArg == null) {
                throw new NullPointerException("configArg unexpectedly null.");
              }
              api.activate(configArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppMetricaPigeon.activateReporter", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              ReporterConfigPigeon configArg = (ReporterConfigPigeon)args.get(0);
              if (configArg == null) {
                throw new NullPointerException("configArg unexpectedly null.");
              }
              api.activateReporter(configArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppMetricaPigeon.touchReporter", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String apiKeyArg = (String)args.get(0);
              if (apiKeyArg == null) {
                throw new NullPointerException("apiKeyArg unexpectedly null.");
              }
              api.touchReporter(apiKeyArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppMetricaPigeon.getLibraryApiLevel", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Long output = api.getLibraryApiLevel();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppMetricaPigeon.getLibraryVersion", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              String output = api.getLibraryVersion();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppMetricaPigeon.resumeSession", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.resumeSession();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppMetricaPigeon.pauseSession", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.pauseSession();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppMetricaPigeon.reportAppOpen", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              StringPigeonWrapper deeplinkArg = (StringPigeonWrapper)args.get(0);
              if (deeplinkArg == null) {
                throw new NullPointerException("deeplinkArg unexpectedly null.");
              }
              api.reportAppOpen(deeplinkArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppMetricaPigeon.reportError", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              ErrorDetailsPigeon errorArg = (ErrorDetailsPigeon)args.get(0);
              if (errorArg == null) {
                throw new NullPointerException("errorArg unexpectedly null.");
              }
              StringPigeonWrapper messageArg = (StringPigeonWrapper)args.get(1);
              if (messageArg == null) {
                throw new NullPointerException("messageArg unexpectedly null.");
              }
              api.reportError(errorArg, messageArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppMetricaPigeon.reportErrorWithGroup", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String groupIdArg = (String)args.get(0);
              if (groupIdArg == null) {
                throw new NullPointerException("groupIdArg unexpectedly null.");
              }
              ErrorDetailsPigeon errorArg = (ErrorDetailsPigeon)args.get(1);
              if (errorArg == null) {
                throw new NullPointerException("errorArg unexpectedly null.");
              }
              StringPigeonWrapper messageArg = (StringPigeonWrapper)args.get(2);
              if (messageArg == null) {
                throw new NullPointerException("messageArg unexpectedly null.");
              }
              api.reportErrorWithGroup(groupIdArg, errorArg, messageArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppMetricaPigeon.reportUnhandledException", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              ErrorDetailsPigeon errorArg = (ErrorDetailsPigeon)args.get(0);
              if (errorArg == null) {
                throw new NullPointerException("errorArg unexpectedly null.");
              }
              api.reportUnhandledException(errorArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppMetricaPigeon.reportEventWithJson", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String eventNameArg = (String)args.get(0);
              if (eventNameArg == null) {
                throw new NullPointerException("eventNameArg unexpectedly null.");
              }
              StringPigeonWrapper attributesJsonArg = (StringPigeonWrapper)args.get(1);
              if (attributesJsonArg == null) {
                throw new NullPointerException("attributesJsonArg unexpectedly null.");
              }
              api.reportEventWithJson(eventNameArg, attributesJsonArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppMetricaPigeon.reportEvent", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String eventNameArg = (String)args.get(0);
              if (eventNameArg == null) {
                throw new NullPointerException("eventNameArg unexpectedly null.");
              }
              api.reportEvent(eventNameArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppMetricaPigeon.reportReferralUrl", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String referralUrlArg = (String)args.get(0);
              if (referralUrlArg == null) {
                throw new NullPointerException("referralUrlArg unexpectedly null.");
              }
              api.reportReferralUrl(referralUrlArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppMetricaPigeon.requestDeferredDeeplink", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<AppMetricaDeferredDeeplinkPigeon> resultCallback = new Result<AppMetricaDeferredDeeplinkPigeon>() {
                public void success(AppMetricaDeferredDeeplinkPigeon result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.requestDeferredDeeplink(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppMetricaPigeon.requestDeferredDeeplinkParameters", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<AppMetricaDeferredDeeplinkParametersPigeon> resultCallback = new Result<AppMetricaDeferredDeeplinkParametersPigeon>() {
                public void success(AppMetricaDeferredDeeplinkParametersPigeon result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.requestDeferredDeeplinkParameters(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppMetricaPigeon.requestAppMetricaDeviceID", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<AppMetricaDeviceIdPigeon> resultCallback = new Result<AppMetricaDeviceIdPigeon>() {
                public void success(AppMetricaDeviceIdPigeon result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.requestAppMetricaDeviceID(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppMetricaPigeon.sendEventsBuffer", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.sendEventsBuffer();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppMetricaPigeon.setLocation", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              LocationPigeon locationArg = (LocationPigeon)args.get(0);
              if (locationArg == null) {
                throw new NullPointerException("locationArg unexpectedly null.");
              }
              api.setLocation(locationArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppMetricaPigeon.setLocationTracking", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Boolean enabledArg = (Boolean)args.get(0);
              if (enabledArg == null) {
                throw new NullPointerException("enabledArg unexpectedly null.");
              }
              api.setLocationTracking(enabledArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppMetricaPigeon.setStatisticsSending", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Boolean enabledArg = (Boolean)args.get(0);
              if (enabledArg == null) {
                throw new NullPointerException("enabledArg unexpectedly null.");
              }
              api.setStatisticsSending(enabledArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppMetricaPigeon.setUserProfileID", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              StringPigeonWrapper userProfileIDArg = (StringPigeonWrapper)args.get(0);
              if (userProfileIDArg == null) {
                throw new NullPointerException("userProfileIDArg unexpectedly null.");
              }
              api.setUserProfileID(userProfileIDArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppMetricaPigeon.reportUserProfile", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              UserProfilePigeon userProfileArg = (UserProfilePigeon)args.get(0);
              if (userProfileArg == null) {
                throw new NullPointerException("userProfileArg unexpectedly null.");
              }
              api.reportUserProfile(userProfileArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppMetricaPigeon.putErrorEnvironmentValue", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String keyArg = (String)args.get(0);
              if (keyArg == null) {
                throw new NullPointerException("keyArg unexpectedly null.");
              }
              StringPigeonWrapper valueArg = (StringPigeonWrapper)args.get(1);
              if (valueArg == null) {
                throw new NullPointerException("valueArg unexpectedly null.");
              }
              api.putErrorEnvironmentValue(keyArg, valueArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppMetricaPigeon.reportRevenue", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              RevenuePigeon revenueArg = (RevenuePigeon)args.get(0);
              if (revenueArg == null) {
                throw new NullPointerException("revenueArg unexpectedly null.");
              }
              api.reportRevenue(revenueArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppMetricaPigeon.reportECommerce", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              ECommerceEventPigeon eventArg = (ECommerceEventPigeon)args.get(0);
              if (eventArg == null) {
                throw new NullPointerException("eventArg unexpectedly null.");
              }
              api.reportECommerce(eventArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppMetricaPigeon.handlePluginInitFinished", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.handlePluginInitFinished();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class ReporterPigeonCodec extends StandardMessageCodec {
    public static final ReporterPigeonCodec INSTANCE = new ReporterPigeonCodec();
    private ReporterPigeonCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return ECommerceAmountPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return ECommerceAmountPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return ECommerceCartItemPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)131:         
          return ECommerceEventPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)132:         
          return ECommerceOrderPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)133:         
          return ECommercePricePigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)134:         
          return ECommercePricePigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)135:         
          return ECommerceProductPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)136:         
          return ECommerceProductPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)137:         
          return ECommerceReferrerPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)138:         
          return ECommerceScreenPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)139:         
          return ErrorDetailsPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)140:         
          return ReceiptPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)141:         
          return RevenuePigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)142:         
          return StackTraceElementPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)143:         
          return StringPigeonWrapper.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)144:         
          return UserProfileAttributePigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)145:         
          return UserProfilePigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof ECommerceAmountPigeon) {
        stream.write(128);
        writeValue(stream, ((ECommerceAmountPigeon) value).toMap());
      } else 
      if (value instanceof ECommerceAmountPigeon) {
        stream.write(129);
        writeValue(stream, ((ECommerceAmountPigeon) value).toMap());
      } else 
      if (value instanceof ECommerceCartItemPigeon) {
        stream.write(130);
        writeValue(stream, ((ECommerceCartItemPigeon) value).toMap());
      } else 
      if (value instanceof ECommerceEventPigeon) {
        stream.write(131);
        writeValue(stream, ((ECommerceEventPigeon) value).toMap());
      } else 
      if (value instanceof ECommerceOrderPigeon) {
        stream.write(132);
        writeValue(stream, ((ECommerceOrderPigeon) value).toMap());
      } else 
      if (value instanceof ECommercePricePigeon) {
        stream.write(133);
        writeValue(stream, ((ECommercePricePigeon) value).toMap());
      } else 
      if (value instanceof ECommercePricePigeon) {
        stream.write(134);
        writeValue(stream, ((ECommercePricePigeon) value).toMap());
      } else 
      if (value instanceof ECommerceProductPigeon) {
        stream.write(135);
        writeValue(stream, ((ECommerceProductPigeon) value).toMap());
      } else 
      if (value instanceof ECommerceProductPigeon) {
        stream.write(136);
        writeValue(stream, ((ECommerceProductPigeon) value).toMap());
      } else 
      if (value instanceof ECommerceReferrerPigeon) {
        stream.write(137);
        writeValue(stream, ((ECommerceReferrerPigeon) value).toMap());
      } else 
      if (value instanceof ECommerceScreenPigeon) {
        stream.write(138);
        writeValue(stream, ((ECommerceScreenPigeon) value).toMap());
      } else 
      if (value instanceof ErrorDetailsPigeon) {
        stream.write(139);
        writeValue(stream, ((ErrorDetailsPigeon) value).toMap());
      } else 
      if (value instanceof ReceiptPigeon) {
        stream.write(140);
        writeValue(stream, ((ReceiptPigeon) value).toMap());
      } else 
      if (value instanceof RevenuePigeon) {
        stream.write(141);
        writeValue(stream, ((RevenuePigeon) value).toMap());
      } else 
      if (value instanceof StackTraceElementPigeon) {
        stream.write(142);
        writeValue(stream, ((StackTraceElementPigeon) value).toMap());
      } else 
      if (value instanceof StringPigeonWrapper) {
        stream.write(143);
        writeValue(stream, ((StringPigeonWrapper) value).toMap());
      } else 
      if (value instanceof UserProfileAttributePigeon) {
        stream.write(144);
        writeValue(stream, ((UserProfileAttributePigeon) value).toMap());
      } else 
      if (value instanceof UserProfilePigeon) {
        stream.write(145);
        writeValue(stream, ((UserProfilePigeon) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface ReporterPigeon {
    void sendEventsBuffer(String apiKey);
    void reportEvent(String apiKey, String eventName);
    void reportEventWithJson(String apiKey, String eventName, StringPigeonWrapper attributesJson);
    void reportError(String apiKey, ErrorDetailsPigeon error, StringPigeonWrapper message);
    void reportErrorWithGroup(String apiKey, String groupId, ErrorDetailsPigeon error, StringPigeonWrapper message);
    void reportUnhandledException(String apiKey, ErrorDetailsPigeon error);
    void resumeSession(String apiKey);
    void pauseSession(String apiKey);
    void setStatisticsSending(String apiKey, Boolean enabled);
    void setUserProfileID(String apiKey, StringPigeonWrapper userProfileID);
    void reportUserProfile(String apiKey, UserProfilePigeon userProfile);
    void reportRevenue(String apiKey, RevenuePigeon revenue);
    void reportECommerce(String apiKey, ECommerceEventPigeon event);

    /** The codec used by ReporterPigeon. */
    static MessageCodec<Object> getCodec() {
      return ReporterPigeonCodec.INSTANCE;
    }

    /** Sets up an instance of `ReporterPigeon` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, ReporterPigeon api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ReporterPigeon.sendEventsBuffer", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String apiKeyArg = (String)args.get(0);
              if (apiKeyArg == null) {
                throw new NullPointerException("apiKeyArg unexpectedly null.");
              }
              api.sendEventsBuffer(apiKeyArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ReporterPigeon.reportEvent", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String apiKeyArg = (String)args.get(0);
              if (apiKeyArg == null) {
                throw new NullPointerException("apiKeyArg unexpectedly null.");
              }
              String eventNameArg = (String)args.get(1);
              if (eventNameArg == null) {
                throw new NullPointerException("eventNameArg unexpectedly null.");
              }
              api.reportEvent(apiKeyArg, eventNameArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ReporterPigeon.reportEventWithJson", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String apiKeyArg = (String)args.get(0);
              if (apiKeyArg == null) {
                throw new NullPointerException("apiKeyArg unexpectedly null.");
              }
              String eventNameArg = (String)args.get(1);
              if (eventNameArg == null) {
                throw new NullPointerException("eventNameArg unexpectedly null.");
              }
              StringPigeonWrapper attributesJsonArg = (StringPigeonWrapper)args.get(2);
              if (attributesJsonArg == null) {
                throw new NullPointerException("attributesJsonArg unexpectedly null.");
              }
              api.reportEventWithJson(apiKeyArg, eventNameArg, attributesJsonArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ReporterPigeon.reportError", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String apiKeyArg = (String)args.get(0);
              if (apiKeyArg == null) {
                throw new NullPointerException("apiKeyArg unexpectedly null.");
              }
              ErrorDetailsPigeon errorArg = (ErrorDetailsPigeon)args.get(1);
              if (errorArg == null) {
                throw new NullPointerException("errorArg unexpectedly null.");
              }
              StringPigeonWrapper messageArg = (StringPigeonWrapper)args.get(2);
              if (messageArg == null) {
                throw new NullPointerException("messageArg unexpectedly null.");
              }
              api.reportError(apiKeyArg, errorArg, messageArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ReporterPigeon.reportErrorWithGroup", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String apiKeyArg = (String)args.get(0);
              if (apiKeyArg == null) {
                throw new NullPointerException("apiKeyArg unexpectedly null.");
              }
              String groupIdArg = (String)args.get(1);
              if (groupIdArg == null) {
                throw new NullPointerException("groupIdArg unexpectedly null.");
              }
              ErrorDetailsPigeon errorArg = (ErrorDetailsPigeon)args.get(2);
              if (errorArg == null) {
                throw new NullPointerException("errorArg unexpectedly null.");
              }
              StringPigeonWrapper messageArg = (StringPigeonWrapper)args.get(3);
              if (messageArg == null) {
                throw new NullPointerException("messageArg unexpectedly null.");
              }
              api.reportErrorWithGroup(apiKeyArg, groupIdArg, errorArg, messageArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ReporterPigeon.reportUnhandledException", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String apiKeyArg = (String)args.get(0);
              if (apiKeyArg == null) {
                throw new NullPointerException("apiKeyArg unexpectedly null.");
              }
              ErrorDetailsPigeon errorArg = (ErrorDetailsPigeon)args.get(1);
              if (errorArg == null) {
                throw new NullPointerException("errorArg unexpectedly null.");
              }
              api.reportUnhandledException(apiKeyArg, errorArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ReporterPigeon.resumeSession", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String apiKeyArg = (String)args.get(0);
              if (apiKeyArg == null) {
                throw new NullPointerException("apiKeyArg unexpectedly null.");
              }
              api.resumeSession(apiKeyArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ReporterPigeon.pauseSession", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String apiKeyArg = (String)args.get(0);
              if (apiKeyArg == null) {
                throw new NullPointerException("apiKeyArg unexpectedly null.");
              }
              api.pauseSession(apiKeyArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ReporterPigeon.setStatisticsSending", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String apiKeyArg = (String)args.get(0);
              if (apiKeyArg == null) {
                throw new NullPointerException("apiKeyArg unexpectedly null.");
              }
              Boolean enabledArg = (Boolean)args.get(1);
              if (enabledArg == null) {
                throw new NullPointerException("enabledArg unexpectedly null.");
              }
              api.setStatisticsSending(apiKeyArg, enabledArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ReporterPigeon.setUserProfileID", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String apiKeyArg = (String)args.get(0);
              if (apiKeyArg == null) {
                throw new NullPointerException("apiKeyArg unexpectedly null.");
              }
              StringPigeonWrapper userProfileIDArg = (StringPigeonWrapper)args.get(1);
              if (userProfileIDArg == null) {
                throw new NullPointerException("userProfileIDArg unexpectedly null.");
              }
              api.setUserProfileID(apiKeyArg, userProfileIDArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ReporterPigeon.reportUserProfile", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String apiKeyArg = (String)args.get(0);
              if (apiKeyArg == null) {
                throw new NullPointerException("apiKeyArg unexpectedly null.");
              }
              UserProfilePigeon userProfileArg = (UserProfilePigeon)args.get(1);
              if (userProfileArg == null) {
                throw new NullPointerException("userProfileArg unexpectedly null.");
              }
              api.reportUserProfile(apiKeyArg, userProfileArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ReporterPigeon.reportRevenue", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String apiKeyArg = (String)args.get(0);
              if (apiKeyArg == null) {
                throw new NullPointerException("apiKeyArg unexpectedly null.");
              }
              RevenuePigeon revenueArg = (RevenuePigeon)args.get(1);
              if (revenueArg == null) {
                throw new NullPointerException("revenueArg unexpectedly null.");
              }
              api.reportRevenue(apiKeyArg, revenueArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ReporterPigeon.reportECommerce", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String apiKeyArg = (String)args.get(0);
              if (apiKeyArg == null) {
                throw new NullPointerException("apiKeyArg unexpectedly null.");
              }
              ECommerceEventPigeon eventArg = (ECommerceEventPigeon)args.get(1);
              if (eventArg == null) {
                throw new NullPointerException("eventArg unexpectedly null.");
              }
              api.reportECommerce(apiKeyArg, eventArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", null);
    return errorMap;
  }
}
